{"version":3,"file":"782-5ad3cc1e3f244e3f4184.js","mappings":"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","sources":["webpack://nft-plutus/./secrets.ts","webpack://nft-plutus/./src/cardano/nft/offchain.ts"],"sourcesContent":["export const project_id = \"mainneti2MU72BQ0wqPQUOW0VPxEm7zJpzXrAaj\";\n","import {\n  Lucid,\n  Tx,\n  Blockfrost,\n  Data,\n  Construct,\n  validatorToAddress,\n  validatorToScriptHash,\n  Redeemer,\n  Datum,\n} from \"lucid-cardano\";\nimport { project_id } from \"../../../secrets\"; // create a file secrets.ts at the root of the and export the project_id\nimport scripts from \"./scripts.json\";\n\nawait Lucid.initialize(\n  new Blockfrost(\"https://cardano-mainnet.blockfrost.io/api/v0\", project_id)\n);\n\nconst { tokenValidator, tokenPolicy, threadPolicy } = scripts;\n\nconst contractAddress = validatorToAddress({\n  type: \"PlutusV1\",\n  script: tokenValidator,\n});\n\nconst tokenPolicyId = validatorToScriptHash({\n  type: \"PlutusV1\",\n  script: tokenPolicy,\n});\nconst threadPolicyId = validatorToScriptHash({\n  type: \"PlutusV1\",\n  script: threadPolicy,\n});\n\nconst ownershipPolicy =\n  \"d5e6bf0500378d4f0da4e8dde6becec7621cd8cbf5cbb9b87013d4cc\";\n\nconst assetPrefix = \"budz\";\n\n/** This input is necessary in the deploy tx to mint the unique thread token */\nconst oref = {\n  txHash: \"08fc5aa81e5c4b44291ae291f7c8c33eac7345ff5bfe315d26419ae63f62a82b\",\n  outputIndex: 1,\n};\n\nconst Count = (c: number): Datum => Data.from(BigInt(c));\n\nconst Action = {\n  Mint: Data.from(new Construct(0, [])) as Redeemer,\n  Burn: Data.from(new Construct(1, [])) as Redeemer,\n};\n\nexport const deploy = async () => {\n  const utxos = await Lucid.wallet.getUtxos();\n  const utxo = utxos.find(\n    (utxo) =>\n      utxo.txHash === oref.txHash && utxo.outputIndex === oref.outputIndex\n  );\n  if (!utxo) throw new Error(\"Utxo is required to deploy NFT contract\");\n\n  const tx = await Tx.new()\n    .collectFrom([utxo])\n    .mintAssets({ [threadPolicyId]: 1n }, Data.empty())\n    .payToContract(contractAddress, Count(0), { [threadPolicyId]: 1n })\n    .attachMintingPolicy({ type: \"PlutusV1\", script: threadPolicy })\n    .complete();\n\n  const signedTx = (await tx.sign()).complete();\n\n  const txHash = await signedTx.submit();\n  return txHash;\n};\n\nexport const mint = async (metadata: any) => {\n  const utxo = (\n    await Lucid.utxosAtWithUnit(contractAddress, threadPolicyId)\n  )[0];\n\n  /** This request for datum discovery will soon be integrated into Lucid itself */\n  const currentCount = await fetch(\n    `https://cardano-mainnet.blockfrost.io/api/v0/scripts/datum/${utxo.datumHash}`,\n    { headers: { project_id } }\n  )\n    .then((res) => res.json())\n    .then((res) => parseInt(res.json_value.int));\n\n  utxo.datum = Count(currentCount);\n\n  const walletUtxos = await Lucid.wallet.getUtxos();\n  const ownershipUtxo = walletUtxos.find((utxo) =>\n    Object.keys(utxo.assets).some((unit) => unit.startsWith(ownershipPolicy))\n  );\n\n  if (!ownershipUtxo) throw new Error(\"You are not eligible to mint an NFT\");\n\n  const mintToken =\n    tokenPolicyId + Buffer.from(assetPrefix + currentCount).toString(\"hex\");\n\n  const tx = await Tx.new()\n    .collectFrom([ownershipUtxo])\n    .collectFrom([utxo], Data.empty())\n    .mintAssets({ [mintToken]: 1n }, Action.Mint)\n    .payToContract(contractAddress, Count(currentCount + 1), {\n      [threadPolicyId]: 1n,\n    })\n    .attachMetadata(721, {\n      [tokenPolicyId]: {\n        [assetPrefix + currentCount]: {\n          ...metadata,\n        },\n      },\n    })\n    .attachMintingPolicy({ type: \"PlutusV1\", script: tokenPolicy })\n    .attachMintingPolicy({ type: \"PlutusV1\", script: tokenValidator })\n    .complete();\n\n  const signedTx = (await tx.sign()).complete();\n\n  const txHash = await signedTx.submit();\n  return txHash;\n};\n\nexport const burn = async (id: number) => {\n  const unit = tokenPolicyId + Buffer.from(assetPrefix + id).toString(\"hex\");\n  const tx = await Tx.new()\n    .mintAssets({ [unit]: -1n }, Action.Burn)\n    .attachMintingPolicy({ type: \"PlutusV1\", script: tokenPolicy })\n    .complete();\n  const signedTx = (await tx.sign()).complete();\n\n  const txHash = await signedTx.submit();\n  return txHash;\n};\n"],"names":["project_id","Lucid","Blockfrost","tokenValidator","scripts","tokenPolicy","threadPolicy","contractAddress","validatorToAddress","type","script","tokenPolicyId","validatorToScriptHash","threadPolicyId","assetPrefix","oref","txHash","outputIndex","Count","c","Data","BigInt","Action","Mint","Construct","Burn","deploy","utxos","utxo","find","Error","Tx","collectFrom","mintAssets","payToContract","attachMintingPolicy","complete","_context","tx","sign","signedTx","submit","mint","metadata","_context2","fetch","datumHash","headers","then","res","json","parseInt","json_value","int","currentCount","datum","walletUtxos","ownershipUtxo","Object","keys","assets","some","unit","startsWith","mintToken","Buffer","from","toString","attachMetadata","burn","id","_context3"],"sourceRoot":""}