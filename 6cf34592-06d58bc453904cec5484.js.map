{"version":3,"file":"6cf34592-06d58bc453904cec5484.js","mappings":"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","sources":["webpack://nft-plutus/./node_modules/lucid-cardano/custom_modules/cardano-multiplatform-lib-browser/cardano_multiplatform_lib_bg.js"],"sourcesContent":["import _classCallCheck from \"/Users/ales/Projects/nft-plutus/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ales/Projects/nft-plutus/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/esnext.global-this.js\";\nimport * as wasm from './cardano_multiplatform_lib_bg.wasm';\nvar heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nvar heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  var ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nvar lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nvar cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nvar cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  var idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n\nvar WASM_VECTOR_LEN = 0;\nvar lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nvar cachedTextEncoder = new lTextEncoder('utf-8');\nvar encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  var buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    var buf = cachedTextEncoder.encode(arg);\n\n    var _ptr = malloc(buf.length);\n\n    getUint8Memory0().subarray(_ptr, _ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return _ptr;\n  }\n\n  var len = arg.length;\n  var ptr = malloc(len);\n  var mem = getUint8Memory0();\n  var offset = 0;\n\n  for (; offset < len; offset++) {\n    var code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    var view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    var ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nvar cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nfunction debugString(val) {\n  // primitive types\n  var type = typeof val;\n\n  if (type == 'number' || type == 'boolean' || val == null) {\n    return \"\".concat(val);\n  }\n\n  if (type == 'string') {\n    return \"\\\"\".concat(val, \"\\\"\");\n  }\n\n  if (type == 'symbol') {\n    var description = val.description;\n\n    if (description == null) {\n      return 'Symbol';\n    } else {\n      return \"Symbol(\".concat(description, \")\");\n    }\n  }\n\n  if (type == 'function') {\n    var name = val.name;\n\n    if (typeof name == 'string' && name.length > 0) {\n      return \"Function(\".concat(name, \")\");\n    } else {\n      return 'Function';\n    }\n  } // objects\n\n\n  if (Array.isArray(val)) {\n    var length = val.length;\n    var debug = '[';\n\n    if (length > 0) {\n      debug += debugString(val[0]);\n    }\n\n    for (var i = 1; i < length; i++) {\n      debug += ', ' + debugString(val[i]);\n    }\n\n    debug += ']';\n    return debug;\n  } // Test for built-in\n\n\n  var builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n  var className;\n\n  if (builtInMatches.length > 1) {\n    className = builtInMatches[1];\n  } else {\n    // Failed to match the standard '[object ClassName]'\n    return toString.call(val);\n  }\n\n  if (className == 'Object') {\n    // we're a user defined class or Object\n    // JSON.stringify avoids problems with cycles, and is generally much\n    // easier than looping through ownProperties of `val`.\n    try {\n      return 'Object(' + JSON.stringify(val) + ')';\n    } catch (_) {\n      return 'Object';\n    }\n  } // errors\n\n\n  if (val instanceof Error) {\n    return \"\".concat(val.name, \": \").concat(val.message, \"\\n\").concat(val.stack);\n  } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n  return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n  var state = {\n    a: arg0,\n    b: arg1,\n    cnt: 1,\n    dtor: dtor\n  };\n\n  var real = function real() {\n    // First up with a closure we increment the internal reference\n    // count. This ensures that the Rust closure environment won't\n    // be deallocated while we're invoking it.\n    state.cnt++;\n    var a = state.a;\n    state.a = 0;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return f.apply(void 0, [a, state.b].concat(args));\n    } finally {\n      if (--state.cnt === 0) {\n        wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n      } else {\n        state.a = a;\n      }\n    }\n  };\n\n  real.original = state;\n  return real;\n}\n\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n  wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h21da04d4be89156a(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n  var ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n  if (!(instance instanceof klass)) {\n    throw new Error(\"expected instance of \".concat(klass.name));\n  }\n\n  return instance.ptr;\n}\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\n\n\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\n  var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n  return TransactionMetadatum.__wrap(ret);\n}\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\n\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    _assertClass(metadata, TransactionMetadatum);\n\n    wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\n\nexport function encode_json_str_to_metadatum(json, schema) {\n  var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n  return TransactionMetadatum.__wrap(ret);\n}\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\n\nexport function decode_metadatum_to_json_str(metadatum, schema) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    _assertClass(metadatum, TransactionMetadatum);\n\n    wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\nvar cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n  return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\n\n\nexport function encrypt_with_password(password, salt, nonce, data) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\n\nexport function decrypt_with_password(password, data) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @param {ExUnitPrices} ex_unit_prices\n* @returns {BigNum}\n*/\n\nexport function min_fee(tx, linear_fee, ex_unit_prices) {\n  _assertClass(tx, Transaction);\n\n  _assertClass(linear_fee, LinearFee);\n\n  _assertClass(ex_unit_prices, ExUnitPrices);\n\n  var ret = wasm.min_fee(tx.ptr, linear_fee.ptr, ex_unit_prices.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {PlutusData}\n*/\n\nexport function encode_json_str_to_plutus_datum(json, schema) {\n  var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_json_str_to_plutus_datum(ptr0, len0, schema);\n  return PlutusData.__wrap(ret);\n}\n/**\n* @param {PlutusData} datum\n* @param {number} schema\n* @returns {string}\n*/\n\nexport function decode_plutus_datum_to_json_str(datum, schema) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    _assertClass(datum, PlutusData);\n\n    wasm.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return getStringFromWasm0(r0, r1);\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n\n    wasm.__wbindgen_free(r0, r1);\n  }\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, LegacyDaedalusPrivateKey);\n\n  var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\n\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(addr, ByronAddress);\n\n  _assertClass(key, Bip32PrivateKey);\n\n  var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n  return BootstrapWitness.__wrap(ret);\n}\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\n\nexport function make_vkey_witness(tx_body_hash, sk) {\n  _assertClass(tx_body_hash, TransactionHash);\n\n  _assertClass(sk, PrivateKey);\n\n  var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n  return Vkeywitness.__wrap(ret);\n}\n/**\n* @param {AuxiliaryData} auxiliary_data\n* @returns {AuxiliaryDataHash}\n*/\n\nexport function hash_auxiliary_data(auxiliary_data) {\n  _assertClass(auxiliary_data, AuxiliaryData);\n\n  var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n  return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\n\nexport function hash_transaction(tx_body) {\n  _assertClass(tx_body, TransactionBody);\n\n  var ret = wasm.hash_transaction(tx_body.ptr);\n  return TransactionHash.__wrap(ret);\n}\n/**\n* @param {PlutusData} plutus_data\n* @returns {DataHash}\n*/\n\nexport function hash_plutus_data(plutus_data) {\n  _assertClass(plutus_data, PlutusData);\n\n  var ret = wasm.hash_plutus_data(plutus_data.ptr);\n  return DataHash.__wrap(ret);\n}\n/**\n* @param {Redeemers} redeemers\n* @param {Costmdls} cost_models\n* @param {PlutusList | undefined} datums\n* @returns {ScriptDataHash}\n*/\n\nexport function hash_script_data(redeemers, cost_models, datums) {\n  _assertClass(redeemers, Redeemers);\n\n  _assertClass(cost_models, Costmdls);\n\n  var ptr0 = 0;\n\n  if (!isLikeNone(datums)) {\n    _assertClass(datums, PlutusList);\n\n    ptr0 = datums.ptr;\n    datums.ptr = 0;\n  }\n\n  var ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n  return ScriptDataHash.__wrap(ret);\n}\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\n\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return Value.__wrap(ret);\n}\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\n\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\n  _assertClass(txbody, TransactionBody);\n\n  _assertClass(pool_deposit, BigNum);\n\n  _assertClass(key_deposit, BigNum);\n\n  var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n* @param {Value} assets\n* @param {boolean} has_data_hash\n* @param {BigNum} coins_per_utxo_word\n* @returns {BigNum}\n*/\n\nexport function min_ada_required(assets, has_data_hash, coins_per_utxo_word) {\n  _assertClass(assets, Value);\n\n  _assertClass(coins_per_utxo_word, BigNum);\n\n  var ret = wasm.min_ada_required(assets.ptr, has_data_hash, coins_per_utxo_word.ptr);\n  return BigNum.__wrap(ret);\n}\n/**\n* Receives a script JSON string\n* and returns a NativeScript.\n* Cardano Wallet and Node styles are supported.\n*\n* * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n* * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n*\n* self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n* @param {string} json\n* @param {string} self_xpub\n* @param {number} schema\n* @returns {NativeScript}\n*/\n\nexport function encode_json_str_to_native_script(json, self_xpub, schema) {\n  var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ptr1 = passStringToWasm0(self_xpub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len1 = WASM_VECTOR_LEN;\n  var ret = wasm.encode_json_str_to_native_script(ptr0, len0, ptr1, len1, schema);\n  return NativeScript.__wrap(ret);\n}\n\nfunction handleError(f, args) {\n  try {\n    return f.apply(this, args);\n  } catch (e) {\n    wasm.__wbindgen_exn_store(addHeapObject(e));\n  }\n}\n\nfunction __wbg_adapter_1335(arg0, arg1, arg2, arg3) {\n  wasm.wasm_bindgen__convert__closures__invoke2_mut__hf20c15ebccf7f833(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n/**\n*/\n\n\nexport var CertificateKind = Object.freeze({\n  StakeRegistration: 0,\n  \"0\": \"StakeRegistration\",\n  StakeDeregistration: 1,\n  \"1\": \"StakeDeregistration\",\n  StakeDelegation: 2,\n  \"2\": \"StakeDelegation\",\n  PoolRegistration: 3,\n  \"3\": \"PoolRegistration\",\n  PoolRetirement: 4,\n  \"4\": \"PoolRetirement\",\n  GenesisKeyDelegation: 5,\n  \"5\": \"GenesisKeyDelegation\",\n  MoveInstantaneousRewardsCert: 6,\n  \"6\": \"MoveInstantaneousRewardsCert\"\n});\n/**\n*/\n\nexport var MIRPot = Object.freeze({\n  Reserves: 0,\n  \"0\": \"Reserves\",\n  Treasury: 1,\n  \"1\": \"Treasury\"\n});\n/**\n*/\n\nexport var MIRKind = Object.freeze({\n  ToOtherPot: 0,\n  \"0\": \"ToOtherPot\",\n  ToStakeCredentials: 1,\n  \"1\": \"ToStakeCredentials\"\n});\n/**\n*/\n\nexport var RelayKind = Object.freeze({\n  SingleHostAddr: 0,\n  \"0\": \"SingleHostAddr\",\n  SingleHostName: 1,\n  \"1\": \"SingleHostName\",\n  MultiHostName: 2,\n  \"2\": \"MultiHostName\"\n});\n/**\n*/\n\nexport var NativeScriptKind = Object.freeze({\n  ScriptPubkey: 0,\n  \"0\": \"ScriptPubkey\",\n  ScriptAll: 1,\n  \"1\": \"ScriptAll\",\n  ScriptAny: 2,\n  \"2\": \"ScriptAny\",\n  ScriptNOfK: 3,\n  \"3\": \"ScriptNOfK\",\n  TimelockStart: 4,\n  \"4\": \"TimelockStart\",\n  TimelockExpiry: 5,\n  \"5\": \"TimelockExpiry\"\n});\n/**\n*/\n\nexport var NetworkIdKind = Object.freeze({\n  Testnet: 0,\n  \"0\": \"Testnet\",\n  Mainnet: 1,\n  \"1\": \"Mainnet\"\n});\n/**\n*/\n\nexport var TransactionMetadatumKind = Object.freeze({\n  MetadataMap: 0,\n  \"0\": \"MetadataMap\",\n  MetadataList: 1,\n  \"1\": \"MetadataList\",\n  Int: 2,\n  \"2\": \"Int\",\n  Bytes: 3,\n  \"3\": \"Bytes\",\n  Text: 4,\n  \"4\": \"Text\"\n});\n/**\n*/\n\nexport var MetadataJsonSchema = Object.freeze({\n  NoConversions: 0,\n  \"0\": \"NoConversions\",\n  BasicConversions: 1,\n  \"1\": \"BasicConversions\",\n  DetailedSchema: 2,\n  \"2\": \"DetailedSchema\"\n});\n/**\n*/\n\nexport var CoinSelectionStrategyCIP2 = Object.freeze({\n  /**\n  * Performs CIP2's Largest First ada-only selection. Will error if outputs contain non-ADA assets.\n  */\n  LargestFirst: 0,\n  \"0\": \"LargestFirst\",\n\n  /**\n  * Performs CIP2's Random Improve ada-only selection. Will error if outputs contain non-ADA assets.\n  */\n  RandomImprove: 1,\n  \"1\": \"RandomImprove\",\n\n  /**\n  * Same as LargestFirst, but before adding ADA, will insert by largest-first for each asset type.\n  */\n  LargestFirstMultiAsset: 2,\n  \"2\": \"LargestFirstMultiAsset\",\n\n  /**\n  * Same as RandomImprove, but before adding ADA, will insert by random-improve for each asset type.\n  */\n  RandomImproveMultiAsset: 3,\n  \"3\": \"RandomImproveMultiAsset\"\n});\n/**\n*/\n\nexport var StakeCredKind = Object.freeze({\n  Key: 0,\n  \"0\": \"Key\",\n  Script: 1,\n  \"1\": \"Script\"\n});\n/**\n*/\n\nexport var ScriptWitnessKind = Object.freeze({\n  NativeWitness: 0,\n  \"0\": \"NativeWitness\",\n  PlutusWitness: 1,\n  \"1\": \"PlutusWitness\"\n});\n/**\n*/\n\nexport var LanguageKind = Object.freeze({\n  PlutusV1: 0,\n  \"0\": \"PlutusV1\",\n  PlutusV2: 1,\n  \"1\": \"PlutusV2\"\n});\n/**\n*/\n\nexport var PlutusDataKind = Object.freeze({\n  ConstrPlutusData: 0,\n  \"0\": \"ConstrPlutusData\",\n  Map: 1,\n  \"1\": \"Map\",\n  List: 2,\n  \"2\": \"List\",\n  Integer: 3,\n  \"3\": \"Integer\",\n  Bytes: 4,\n  \"4\": \"Bytes\"\n});\n/**\n*/\n\nexport var RedeemerTagKind = Object.freeze({\n  Spend: 0,\n  \"0\": \"Spend\",\n  Mint: 1,\n  \"1\": \"Mint\",\n  Cert: 2,\n  \"2\": \"Cert\",\n  Reward: 3,\n  \"3\": \"Reward\"\n});\n/**\n* JSON <-> PlutusData conversion schemas.\n* Follows ScriptDataJsonSchema in cardano-cli defined at:\n* https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n*\n* All methods here have the following restrictions due to limitations on dependencies:\n* * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n* * Hex strings for bytes don't accept odd-length (half-byte) strings.\n*      cardano-cli seems to support these however but it seems to be different than just 0-padding\n*      on either side when tested so proceed with caution\n*/\n\nexport var PlutusDatumSchema = Object.freeze({\n  /**\n  * ScriptDataJsonNoSchema in cardano-node.\n  *\n  * This is the format used by --script-data-value in cardano-cli\n  * This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n  * From JSON:\n  * * null/true/false/floats NOT supported\n  * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n  * To JSON:\n  * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n  * * Lists not supported in keys\n  * * Maps not supported in keys\n  */\n  BasicConversions: 0,\n  \"0\": \"BasicConversions\",\n\n  /**\n  * ScriptDataJsonDetailedSchema in cardano-node.\n  *\n  * This is the format used by --script-data-file in cardano-cli\n  * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n  * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n  * 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n  *    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n  * 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n  *    Integer's value is a JSON number e.g. {\"int\": 100}\n  *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n  *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n  *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n  *          respectively with their values being the plutus datum encoded via this same schema\n  *          e.g. {\"map\": [\n  *              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n  *              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n  *          ]}\n  * From JSON:\n  * * null/true/false/floats NOT supported\n  * * the JSON must conform to a very specific schema\n  * To JSON:\n  * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n  */\n  DetailedSchema: 1,\n  \"1\": \"DetailedSchema\"\n});\n/**\n*/\n\nexport var ScriptKind = Object.freeze({\n  NativeScript: 0,\n  \"0\": \"NativeScript\",\n  PlutusScriptV1: 1,\n  \"1\": \"PlutusScriptV1\",\n  PlutusScriptV2: 2,\n  \"2\": \"PlutusScriptV2\"\n});\n/**\n*/\n\nexport var DatumKind = Object.freeze({\n  Hash: 0,\n  \"0\": \"Hash\",\n  Data: 1,\n  \"1\": \"Data\"\n});\n/**\n* Each new language uses a different namespace for hashing its script\n* This is because you could have a language where the same bytes have different semantics\n* So this avoids scripts in different languages mapping to the same hash\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\n* https://github.com/input-output-hk/cardano-ledger/blob/9c3b4737b13b30f71529e76c5330f403165e28a6/eras/alonzo/impl/src/Cardano/Ledger/Alonzo.hs#L127\n*/\n\nexport var ScriptHashNamespace = Object.freeze({\n  NativeScript: 0,\n  \"0\": \"NativeScript\",\n  PlutusV1: 1,\n  \"1\": \"PlutusV1\",\n  PlutusV2: 2,\n  \"2\": \"PlutusV2\"\n});\n/**\n* Used to choose the schema for a script JSON string\n*/\n\nexport var ScriptSchema = Object.freeze({\n  Wallet: 0,\n  \"0\": \"Wallet\",\n  Node: 1,\n  \"1\": \"Node\"\n});\n/**\n*/\n\nexport var Address = /*#__PURE__*/function () {\n  function Address() {\n    _classCallCheck(this, Address);\n  }\n\n  _createClass(Address, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.address_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.address_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.address_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string | undefined} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"network_id\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function network_id() {\n      var ret = wasm.address_network_id(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {ByronAddress | undefined}\n    */\n\n  }, {\n    key: \"as_byron\",\n    value: function as_byron() {\n      var ret = wasm.address_as_byron(this.ptr);\n      return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress | undefined}\n    */\n\n  }, {\n    key: \"as_reward\",\n    value: function as_reward() {\n      var ret = wasm.address_as_reward(this.ptr);\n      return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {PointerAddress | undefined}\n    */\n\n  }, {\n    key: \"as_pointer\",\n    value: function as_pointer() {\n      var ret = wasm.address_as_pointer(this.ptr);\n      return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n    /**\n    * @returns {EnterpriseAddress | undefined}\n    */\n\n  }, {\n    key: \"as_enterprise\",\n    value: function as_enterprise() {\n      var ret = wasm.address_as_enterprise(this.ptr);\n      return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {BaseAddress | undefined}\n    */\n\n  }, {\n    key: \"as_base\",\n    value: function as_base() {\n      var ret = wasm.address_as_base(this.ptr);\n      return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Address.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(data) {\n      var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.address_from_bytes(ptr0, len0);\n      return Address.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.address_from_json(ptr0, len0);\n      return Address.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.address_from_bech32(ptr0, len0);\n      return Address.__wrap(ret);\n    }\n  }]);\n\n  return Address;\n}();\n/**\n*/\n\nexport var AssetName = /*#__PURE__*/function () {\n  function AssetName() {\n    _classCallCheck(this, AssetName);\n  }\n\n  _createClass(AssetName, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assetname_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetName}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assetname_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.assetname_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {AssetName}\n    */\n\n  }, {\n    key: \"name\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function name() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assetname_name(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(AssetName.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assetname_from_bytes(ptr0, len0);\n      return AssetName.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assetname_from_json(ptr0, len0);\n      return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} name\n    * @returns {AssetName}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(name) {\n      var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assetname_new(ptr0, len0);\n      return AssetName.__wrap(ret);\n    }\n  }]);\n\n  return AssetName;\n}();\n/**\n*/\n\nexport var AssetNames = /*#__PURE__*/function () {\n  function AssetNames() {\n    _classCallCheck(this, AssetNames);\n  }\n\n  _createClass(AssetNames, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assetnames_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetNames}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assetnames_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.assetnames_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {AssetNames}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.assetnames_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {AssetName}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.assetnames_get(this.ptr, index);\n      return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, AssetName);\n\n      wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(AssetNames.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assetnames_from_bytes(ptr0, len0);\n      return AssetNames.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assetnames_from_json(ptr0, len0);\n      return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.assetnames_new();\n      return AssetNames.__wrap(ret);\n    }\n  }]);\n\n  return AssetNames;\n}();\n/**\n*/\n\nexport var Assets = /*#__PURE__*/function () {\n  function Assets() {\n    _classCallCheck(this, Assets);\n  }\n\n  _createClass(Assets, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_assets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assets_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Assets}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.assets_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.assets_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Assets}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.assets_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, AssetName);\n\n      _assertClass(value, BigNum);\n\n      var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, AssetName);\n\n      var ret = wasm.assets_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.assets_keys(this.ptr);\n      return AssetNames.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Assets.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assets_from_bytes(ptr0, len0);\n      return Assets.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.assets_from_json(ptr0, len0);\n      return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {Assets}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.assets_new();\n      return Assets.__wrap(ret);\n    }\n  }]);\n\n  return Assets;\n}();\n/**\n*/\n\nexport var AuxiliaryData = /*#__PURE__*/function () {\n  function AuxiliaryData() {\n    _classCallCheck(this, AuxiliaryData);\n  }\n\n  _createClass(AuxiliaryData, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryData}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.auxiliarydata_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.auxiliarydata_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {AuxiliaryData}\n    */\n\n  }, {\n    key: \"metadata\",\n    value:\n    /**\n    * @returns {GeneralTransactionMetadata | undefined}\n    */\n    function metadata() {\n      var ret = wasm.auxiliarydata_metadata(this.ptr);\n      return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {GeneralTransactionMetadata} metadata\n    */\n\n  }, {\n    key: \"set_metadata\",\n    value: function set_metadata(metadata) {\n      _assertClass(metadata, GeneralTransactionMetadata);\n\n      wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value: function native_scripts() {\n      var ret = wasm.auxiliarydata_native_scripts(this.ptr);\n      return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n\n  }, {\n    key: \"set_native_scripts\",\n    value: function set_native_scripts(native_scripts) {\n      _assertClass(native_scripts, NativeScripts);\n\n      wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n\n  }, {\n    key: \"plutus_scripts\",\n    value: function plutus_scripts() {\n      var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n      return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n\n  }, {\n    key: \"set_plutus_scripts\",\n    value: function set_plutus_scripts(plutus_scripts) {\n      _assertClass(plutus_scripts, PlutusScripts);\n\n      wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(AuxiliaryData.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\n      return AuxiliaryData.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.auxiliarydata_from_json(ptr0, len0);\n      return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryData}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.auxiliarydata_new();\n      return AuxiliaryData.__wrap(ret);\n    }\n  }]);\n\n  return AuxiliaryData;\n}();\n/**\n*/\n\nexport var AuxiliaryDataHash = /*#__PURE__*/function () {\n  function AuxiliaryDataHash() {\n    _classCallCheck(this, AuxiliaryDataHash);\n  }\n\n  _createClass(AuxiliaryDataHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryDataHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {AuxiliaryDataHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {AuxiliaryDataHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(AuxiliaryDataHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\n      return AuxiliaryDataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\n      return AuxiliaryDataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.auxiliarydatahash_from_hex(ptr0, len0);\n      return AuxiliaryDataHash.__wrap(ret);\n    }\n  }]);\n\n  return AuxiliaryDataHash;\n}();\n/**\n*/\n\nexport var AuxiliaryDataSet = /*#__PURE__*/function () {\n  function AuxiliaryDataSet() {\n    _classCallCheck(this, AuxiliaryDataSet);\n  }\n\n  _createClass(AuxiliaryDataSet, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.auxiliarydataset_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} tx_index\n    * @param {AuxiliaryData} data\n    * @returns {AuxiliaryData | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(tx_index, data) {\n      _assertClass(tx_index, BigNum);\n\n      _assertClass(data, AuxiliaryData);\n\n      var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index.ptr, data.ptr);\n      return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} tx_index\n    * @returns {AuxiliaryData | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(tx_index) {\n      _assertClass(tx_index, BigNum);\n\n      var ret = wasm.auxiliarydataset_get(this.ptr, tx_index.ptr);\n      return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionIndexes}\n    */\n\n  }, {\n    key: \"indices\",\n    value: function indices() {\n      var ret = wasm.auxiliarydataset_indices(this.ptr);\n      return TransactionIndexes.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(AuxiliaryDataSet.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.auxiliarydataset_new();\n      return AuxiliaryDataSet.__wrap(ret);\n    }\n  }]);\n\n  return AuxiliaryDataSet;\n}();\n/**\n*/\n\nexport var BaseAddress = /*#__PURE__*/function () {\n  function BaseAddress() {\n    _classCallCheck(this, BaseAddress);\n  }\n\n  _createClass(BaseAddress, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {StakeCredential} stake\n    * @returns {BaseAddress}\n    */\n\n  }, {\n    key: \"payment_cred\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function payment_cred() {\n      var ret = wasm.baseaddress_payment_cred(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n\n  }, {\n    key: \"stake_cred\",\n    value: function stake_cred() {\n      var ret = wasm.baseaddress_stake_cred(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_address\",\n    value: function to_address() {\n      var ret = wasm.baseaddress_to_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {BaseAddress | undefined}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BaseAddress.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(network, payment, stake) {\n      _assertClass(payment, StakeCredential);\n\n      _assertClass(stake, StakeCredential);\n\n      var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n      return BaseAddress.__wrap(ret);\n    }\n  }, {\n    key: \"from_address\",\n    value: function from_address(addr) {\n      _assertClass(addr, Address);\n\n      var ret = wasm.baseaddress_from_address(addr.ptr);\n      return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n  }]);\n\n  return BaseAddress;\n}();\n/**\n*/\n\nexport var BigInt = /*#__PURE__*/function () {\n  function BigInt() {\n    _classCallCheck(this, BigInt);\n  }\n\n  _createClass(BigInt, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bigint_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigInt}\n    */\n\n  }, {\n    key: \"as_u64\",\n    value:\n    /**\n    * @returns {BigNum | undefined}\n    */\n    function as_u64() {\n      var ret = wasm.bigint_as_u64(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n\n  }, {\n    key: \"as_int\",\n    value: function as_int() {\n      var ret = wasm.bigint_as_int(this.ptr);\n      return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {BigInt}\n    */\n\n  }, {\n    key: \"to_str\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_str() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bigint_to_str(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BigInt.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bigint_from_bytes(ptr0, len0);\n      return BigInt.__wrap(ret);\n    }\n  }, {\n    key: \"from_str\",\n    value: function from_str(text) {\n      var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bigint_from_str(ptr0, len0);\n      return BigInt.__wrap(ret);\n    }\n  }]);\n\n  return BigInt;\n}();\n/**\n*/\n\nexport var BigNum = /*#__PURE__*/function () {\n  function BigNum() {\n    _classCallCheck(this, BigNum);\n  }\n\n  _createClass(BigNum, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bignum_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"to_str\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_str() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bignum_to_str(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"is_zero\",\n    value:\n    /**\n    * @returns {boolean}\n    */\n    function is_zero() {\n      var ret = wasm.bignum_is_zero(this.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"checked_mul\",\n    value: function checked_mul(other) {\n      _assertClass(other, BigNum);\n\n      var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"checked_add\",\n    value: function checked_add(other) {\n      _assertClass(other, BigNum);\n\n      var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"checked_sub\",\n    value: function checked_sub(other) {\n      _assertClass(other, BigNum);\n\n      var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"checked_div\",\n    value: function checked_div(other) {\n      _assertClass(other, BigNum);\n\n      var ret = wasm.bignum_checked_div(this.ptr, other.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * returns 0 if it would otherwise underflow\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"clamped_sub\",\n    value: function clamped_sub(other) {\n      _assertClass(other, BigNum);\n\n      var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {number}\n    */\n\n  }, {\n    key: \"compare\",\n    value: function compare(rhs_value) {\n      _assertClass(rhs_value, BigNum);\n\n      var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n      return ret;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BigNum.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bignum_from_bytes(ptr0, len0);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"from_str\",\n    value: function from_str(string) {\n      var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bignum_from_str(ptr0, len0);\n      return BigNum.__wrap(ret);\n    }\n  }, {\n    key: \"zero\",\n    value: function zero() {\n      var ret = wasm.bignum_zero();\n      return BigNum.__wrap(ret);\n    }\n  }]);\n\n  return BigNum;\n}();\n/**\n*/\n\nexport var Bip32PrivateKey = /*#__PURE__*/function () {\n  function Bip32PrivateKey() {\n    _classCallCheck(this, Bip32PrivateKey);\n  }\n\n  _createClass(Bip32PrivateKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n    * derive this private key with the given index.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"derive\",\n    value: function derive(index) {\n      var ret = wasm.bip32privatekey_derive(this.ptr, index);\n      return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\n    * the traditional 96-byte xprv is simply encoded as\n    * prv | chaincode\n    * however, because some software may not know how to compute a public key from a private key,\n    * the 128-byte inlines the public key in the following format\n    * prv | pub | chaincode\n    * so be careful if you see the term \"xprv\" as it could refer to either one\n    * our library does not require the pub (instead we compute the pub key when needed)\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"to_128_xprv\",\n    value:\n    /**\n    * see from_128_xprv\n    * @returns {Uint8Array}\n    */\n    function to_128_xprv() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"to_raw_key\",\n    value:\n    /**\n    * @returns {PrivateKey}\n    */\n    function to_raw_key() {\n      var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n      return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Bip32PublicKey}\n    */\n\n  }, {\n    key: \"to_public\",\n    value: function to_public() {\n      var ret = wasm.bip32privatekey_to_public(this.ptr);\n      return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_bech32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {Uint8Array} entropy\n    * @param {Uint8Array} password\n    * @returns {Bip32PrivateKey}\n    */\n\n  }, {\n    key: \"chaincode\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function chaincode() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32privatekey_chaincode(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Bip32PrivateKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_128_xprv\",\n    value: function from_128_xprv(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n      return Bip32PrivateKey.__wrap(ret);\n    }\n  }, {\n    key: \"generate_ed25519_bip32\",\n    value: function generate_ed25519_bip32() {\n      var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n      return Bip32PrivateKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n      return Bip32PrivateKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech32_str) {\n      var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n      return Bip32PrivateKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bip39_entropy\",\n    value: function from_bip39_entropy(entropy, password) {\n      var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n      var len1 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n      return Bip32PrivateKey.__wrap(ret);\n    }\n  }]);\n\n  return Bip32PrivateKey;\n}();\n/**\n*/\n\nexport var Bip32PublicKey = /*#__PURE__*/function () {\n  function Bip32PublicKey() {\n    _classCallCheck(this, Bip32PublicKey);\n  }\n\n  _createClass(Bip32PublicKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n    * derive this public key with the given index.\n    *\n    * # Errors\n    *\n    * If the index is not a soft derivation index (< 0x80000000) then\n    * calling this method will fail.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PublicKey}\n    */\n\n  }, {\n    key: \"derive\",\n    value: function derive(index) {\n      var ret = wasm.bip32publickey_derive(this.ptr, index);\n      return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n\n  }, {\n    key: \"to_raw_key\",\n    value: function to_raw_key() {\n      var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n      return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PublicKey}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32publickey_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PublicKey}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_bech32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32publickey_to_bech32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"chaincode\",\n    value: function chaincode() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bip32publickey_chaincode(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Bip32PublicKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n      return Bip32PublicKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech32_str) {\n      var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n      return Bip32PublicKey.__wrap(ret);\n    }\n  }]);\n\n  return Bip32PublicKey;\n}();\n/**\n*/\n\nexport var Block = /*#__PURE__*/function () {\n  function Block() {\n    _classCallCheck(this, Block);\n  }\n\n  _createClass(Block, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_block_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.block_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Block}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.block_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.block_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Block}\n    */\n\n  }, {\n    key: \"header\",\n    value:\n    /**\n    * @returns {Header}\n    */\n    function header() {\n      var ret = wasm.block_header(this.ptr);\n      return Header.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n\n  }, {\n    key: \"transaction_bodies\",\n    value: function transaction_bodies() {\n      var ret = wasm.block_transaction_bodies(this.ptr);\n      return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n\n  }, {\n    key: \"transaction_witness_sets\",\n    value: function transaction_witness_sets() {\n      var ret = wasm.block_transaction_witness_sets(this.ptr);\n      return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n\n  }, {\n    key: \"auxiliary_data_set\",\n    value: function auxiliary_data_set() {\n      var ret = wasm.block_auxiliary_data_set(this.ptr);\n      return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionIndexes}\n    */\n\n  }, {\n    key: \"invalid_transactions\",\n    value: function invalid_transactions() {\n      var ret = wasm.block_invalid_transactions(this.ptr);\n      return TransactionIndexes.__wrap(ret);\n    }\n    /**\n    * @param {Header} header\n    * @param {TransactionBodies} transaction_bodies\n    * @param {TransactionWitnessSets} transaction_witness_sets\n    * @param {AuxiliaryDataSet} auxiliary_data_set\n    * @param {TransactionIndexes} invalid_transactions\n    * @returns {Block}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Block.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.block_from_bytes(ptr0, len0);\n      return Block.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.block_from_json(ptr0, len0);\n      return Block.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n      _assertClass(header, Header);\n\n      _assertClass(transaction_bodies, TransactionBodies);\n\n      _assertClass(transaction_witness_sets, TransactionWitnessSets);\n\n      _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n\n      _assertClass(invalid_transactions, TransactionIndexes);\n\n      var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, invalid_transactions.ptr);\n      return Block.__wrap(ret);\n    }\n  }]);\n\n  return Block;\n}();\n/**\n*/\n\nexport var BlockHash = /*#__PURE__*/function () {\n  function BlockHash() {\n    _classCallCheck(this, BlockHash);\n  }\n\n  _createClass(BlockHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BlockHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.blockhash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {BlockHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.blockhash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {BlockHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BlockHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.blockhash_from_bytes(ptr0, len0);\n      return BlockHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.blockhash_from_bech32(ptr0, len0);\n      return BlockHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.blockhash_from_hex(ptr0, len0);\n      return BlockHash.__wrap(ret);\n    }\n  }]);\n\n  return BlockHash;\n}();\n/**\n*/\n\nexport var Blockfrost = /*#__PURE__*/function () {\n  function Blockfrost() {\n    _classCallCheck(this, Blockfrost);\n  }\n\n  _createClass(Blockfrost, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_blockfrost_free(ptr);\n    }\n    /**\n    * @param {string} url\n    * @param {string} project_id\n    * @returns {Blockfrost}\n    */\n\n  }, {\n    key: \"url\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function url() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.blockfrost_url(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"project_id\",\n    value: function project_id() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.blockfrost_project_id(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Blockfrost.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(url, project_id) {\n      var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ptr1 = passStringToWasm0(project_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len1 = WASM_VECTOR_LEN;\n      var ret = wasm.blockfrost_new(ptr0, len0, ptr1, len1);\n      return Blockfrost.__wrap(ret);\n    }\n  }]);\n\n  return Blockfrost;\n}();\n/**\n*/\n\nexport var BootstrapWitness = /*#__PURE__*/function () {\n  function BootstrapWitness() {\n    _classCallCheck(this, BootstrapWitness);\n  }\n\n  _createClass(BootstrapWitness, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BootstrapWitness}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bootstrapwitness_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.bootstrapwitness_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {BootstrapWitness}\n    */\n\n  }, {\n    key: \"vkey\",\n    value:\n    /**\n    * @returns {Vkey}\n    */\n    function vkey() {\n      var ret = wasm.bootstrapwitness_vkey(this.ptr);\n      return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n\n  }, {\n    key: \"signature\",\n    value: function signature() {\n      var ret = wasm.bootstrapwitness_signature(this.ptr);\n      return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"chain_code\",\n    value: function chain_code() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"attributes\",\n    value: function attributes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.bootstrapwitness_attributes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @param {Uint8Array} chain_code\n    * @param {Uint8Array} attributes\n    * @returns {BootstrapWitness}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BootstrapWitness.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n      return BootstrapWitness.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.bootstrapwitness_from_json(ptr0, len0);\n      return BootstrapWitness.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(vkey, signature, chain_code, attributes) {\n      _assertClass(vkey, Vkey);\n\n      _assertClass(signature, Ed25519Signature);\n\n      var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n      var len1 = WASM_VECTOR_LEN;\n      var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n      return BootstrapWitness.__wrap(ret);\n    }\n  }]);\n\n  return BootstrapWitness;\n}();\n/**\n*/\n\nexport var BootstrapWitnesses = /*#__PURE__*/function () {\n  function BootstrapWitnesses() {\n    _classCallCheck(this, BootstrapWitnesses);\n  }\n\n  _createClass(BootstrapWitnesses, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.bootstrapwitnesses_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BootstrapWitness}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n      return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitness} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, BootstrapWitness);\n\n      wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(BootstrapWitnesses.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.bootstrapwitnesses_new();\n      return BootstrapWitnesses.__wrap(ret);\n    }\n  }]);\n\n  return BootstrapWitnesses;\n}();\n/**\n*/\n\nexport var ByronAddress = /*#__PURE__*/function () {\n  function ByronAddress() {\n    _classCallCheck(this, ByronAddress);\n  }\n\n  _createClass(ByronAddress, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_base58\",\n    value: function to_base58() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.byronaddress_to_base58(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.byronaddress_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ByronAddress}\n    */\n\n  }, {\n    key: \"byron_protocol_magic\",\n    value:\n    /**\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n    * note: for bech32 addresses, you need to use network_id instead\n    * @returns {number}\n    */\n    function byron_protocol_magic() {\n      var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"attributes\",\n    value: function attributes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.byronaddress_attributes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"network_id\",\n    value: function network_id() {\n      var ret = wasm.byronaddress_network_id(this.ptr);\n      return ret;\n    }\n    /**\n    * @param {string} s\n    * @returns {ByronAddress}\n    */\n\n  }, {\n    key: \"to_address\",\n    value:\n    /**\n    * @returns {Address}\n    */\n    function to_address() {\n      var ret = wasm.byronaddress_to_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {ByronAddress | undefined}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ByronAddress.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n      return ByronAddress.__wrap(ret);\n    }\n  }, {\n    key: \"from_base58\",\n    value: function from_base58(s) {\n      var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.byronaddress_from_base58(ptr0, len0);\n      return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {Bip32PublicKey} key\n    * @param {number} protocol_magic\n    * @returns {ByronAddress}\n    */\n\n  }, {\n    key: \"icarus_from_key\",\n    value: function icarus_from_key(key, protocol_magic) {\n      _assertClass(key, Bip32PublicKey);\n\n      var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n      return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {boolean}\n    */\n\n  }, {\n    key: \"is_valid\",\n    value: function is_valid(s) {\n      var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.byronaddress_is_valid(ptr0, len0);\n      return ret !== 0;\n    }\n  }, {\n    key: \"from_address\",\n    value: function from_address(addr) {\n      _assertClass(addr, Address);\n\n      var ret = wasm.byronaddress_from_address(addr.ptr);\n      return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n  }]);\n\n  return ByronAddress;\n}();\n/**\n*/\n\nexport var Certificate = /*#__PURE__*/function () {\n  function Certificate() {\n    _classCallCheck(this, Certificate);\n  }\n\n  _createClass(Certificate, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.certificate_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.certificate_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.certificate_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.certificate_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {StakeRegistration | undefined}\n    */\n\n  }, {\n    key: \"as_stake_registration\",\n    value: function as_stake_registration() {\n      var ret = wasm.certificate_as_stake_registration(this.ptr);\n      return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDeregistration | undefined}\n    */\n\n  }, {\n    key: \"as_stake_deregistration\",\n    value: function as_stake_deregistration() {\n      var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n      return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDelegation | undefined}\n    */\n\n  }, {\n    key: \"as_stake_delegation\",\n    value: function as_stake_delegation() {\n      var ret = wasm.certificate_as_stake_delegation(this.ptr);\n      return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRegistration | undefined}\n    */\n\n  }, {\n    key: \"as_pool_registration\",\n    value: function as_pool_registration() {\n      var ret = wasm.certificate_as_pool_registration(this.ptr);\n      return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRetirement | undefined}\n    */\n\n  }, {\n    key: \"as_pool_retirement\",\n    value: function as_pool_retirement() {\n      var ret = wasm.certificate_as_pool_retirement(this.ptr);\n      return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisKeyDelegation | undefined}\n    */\n\n  }, {\n    key: \"as_genesis_key_delegation\",\n    value: function as_genesis_key_delegation() {\n      var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n      return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousRewardsCert | undefined}\n    */\n\n  }, {\n    key: \"as_move_instantaneous_rewards_cert\",\n    value: function as_move_instantaneous_rewards_cert() {\n      var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n      return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Certificate.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.certificate_from_bytes(ptr0, len0);\n      return Certificate.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.certificate_from_json(ptr0, len0);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeRegistration} stake_registration\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_stake_registration\",\n    value: function new_stake_registration(stake_registration) {\n      _assertClass(stake_registration, StakeRegistration);\n\n      var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDeregistration} stake_deregistration\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_stake_deregistration\",\n    value: function new_stake_deregistration(stake_deregistration) {\n      _assertClass(stake_deregistration, StakeDeregistration);\n\n      var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDelegation} stake_delegation\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_stake_delegation\",\n    value: function new_stake_delegation(stake_delegation) {\n      _assertClass(stake_delegation, StakeDelegation);\n\n      var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRegistration} pool_registration\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_pool_registration\",\n    value: function new_pool_registration(pool_registration) {\n      _assertClass(pool_registration, PoolRegistration);\n\n      var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRetirement} pool_retirement\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_pool_retirement\",\n    value: function new_pool_retirement(pool_retirement) {\n      _assertClass(pool_retirement, PoolRetirement);\n\n      var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisKeyDelegation} genesis_key_delegation\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_genesis_key_delegation\",\n    value: function new_genesis_key_delegation(genesis_key_delegation) {\n      _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n\n      var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"new_move_instantaneous_rewards_cert\",\n    value: function new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n      _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n\n      var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n      return Certificate.__wrap(ret);\n    }\n  }]);\n\n  return Certificate;\n}();\n/**\n*/\n\nexport var Certificates = /*#__PURE__*/function () {\n  function Certificates() {\n    _classCallCheck(this, Certificates);\n  }\n\n  _createClass(Certificates, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.certificates_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificates}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.certificates_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.certificates_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Certificates}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.certificates_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Certificate}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.certificates_get(this.ptr, index);\n      return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {Certificate} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Certificate);\n\n      wasm.certificates_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Certificates.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.certificates_from_bytes(ptr0, len0);\n      return Certificates.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.certificates_from_json(ptr0, len0);\n      return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {Certificates}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.certificates_new();\n      return Certificates.__wrap(ret);\n    }\n  }]);\n\n  return Certificates;\n}();\n/**\n*/\n\nexport var ConstrPlutusData = /*#__PURE__*/function () {\n  function ConstrPlutusData() {\n    _classCallCheck(this, ConstrPlutusData);\n  }\n\n  _createClass(ConstrPlutusData, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ConstrPlutusData}\n    */\n\n  }, {\n    key: \"alternative\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function alternative() {\n      var ret = wasm.constrplutusdata_alternative(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n\n  }, {\n    key: \"data\",\n    value: function data() {\n      var ret = wasm.constrplutusdata_data(this.ptr);\n      return PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} alternative\n    * @param {PlutusList} data\n    * @returns {ConstrPlutusData}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ConstrPlutusData.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\n      return ConstrPlutusData.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(alternative, data) {\n      _assertClass(alternative, BigNum);\n\n      _assertClass(data, PlutusList);\n\n      var ret = wasm.constrplutusdata_new(alternative.ptr, data.ptr);\n      return ConstrPlutusData.__wrap(ret);\n    }\n  }]);\n\n  return ConstrPlutusData;\n}();\n/**\n*/\n\nexport var CostModel = /*#__PURE__*/function () {\n  function CostModel() {\n    _classCallCheck(this, CostModel);\n  }\n\n  _createClass(CostModel, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.costmodel_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CostModel}\n    */\n\n  }, {\n    key: \"set\",\n    value:\n    /**\n    * @param {number} operation\n    * @param {Int} cost\n    * @returns {Int}\n    */\n    function set(operation, cost) {\n      _assertClass(cost, Int);\n\n      var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} operation\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(operation) {\n      var ret = wasm.costmodel_get(this.ptr, operation);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"len\",\n    value: function len() {\n      var ret = wasm.costmodel_len(this.ptr);\n      return ret >>> 0;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(CostModel.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.costmodel_from_bytes(ptr0, len0);\n      return CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {CostModel}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.costmodel_new();\n      return CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {CostModel}\n    */\n\n  }, {\n    key: \"new_plutus_v2\",\n    value: function new_plutus_v2() {\n      var ret = wasm.costmodel_new_plutus_v2();\n      return CostModel.__wrap(ret);\n    }\n  }]);\n\n  return CostModel;\n}();\n/**\n*/\n\nexport var Costmdls = /*#__PURE__*/function () {\n  function Costmdls() {\n    _classCallCheck(this, Costmdls);\n  }\n\n  _createClass(Costmdls, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.costmdls_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Costmdls}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.costmdls_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {Language} key\n    * @param {CostModel} value\n    * @returns {CostModel | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, Language);\n\n      _assertClass(value, CostModel);\n\n      var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @param {Language} key\n    * @returns {CostModel | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, Language);\n\n      var ret = wasm.costmdls_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {Languages}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.costmdls_keys(this.ptr);\n      return Languages.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Costmdls.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.costmdls_from_bytes(ptr0, len0);\n      return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.costmdls_new();\n      return Costmdls.__wrap(ret);\n    }\n  }]);\n\n  return Costmdls;\n}();\n/**\n*/\n\nexport var DNSRecordAorAAAA = /*#__PURE__*/function () {\n  function DNSRecordAorAAAA() {\n    _classCallCheck(this, DNSRecordAorAAAA);\n  }\n\n  _createClass(DNSRecordAorAAAA, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordAorAAAA}\n    */\n\n  }, {\n    key: \"record\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function record() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(DNSRecordAorAAAA.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n      return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordAorAAAA}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(dns_name) {\n      var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n      return DNSRecordAorAAAA.__wrap(ret);\n    }\n  }]);\n\n  return DNSRecordAorAAAA;\n}();\n/**\n*/\n\nexport var DNSRecordSRV = /*#__PURE__*/function () {\n  function DNSRecordSRV() {\n    _classCallCheck(this, DNSRecordSRV);\n  }\n\n  _createClass(DNSRecordSRV, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordSRV}\n    */\n\n  }, {\n    key: \"record\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function record() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.dnsrecordsrv_record(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(DNSRecordSRV.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n      return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordSRV}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(dns_name) {\n      var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n      return DNSRecordSRV.__wrap(ret);\n    }\n  }]);\n\n  return DNSRecordSRV;\n}();\n/**\n*/\n\nexport var Data = /*#__PURE__*/function () {\n  function Data() {\n    _classCallCheck(this, Data);\n  }\n\n  _createClass(Data, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_data_free(ptr);\n    }\n    /**\n    * @param {PlutusData} plutus_data\n    * @returns {Data}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(plutus_data) {\n      _assertClass(plutus_data, PlutusData);\n\n      var ret = wasm.data_new(this.ptr, plutus_data.ptr);\n      return Data.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var ret = wasm.data_get(this.ptr);\n      return PlutusData.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Data.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return Data;\n}();\n/**\n*/\n\nexport var DataHash = /*#__PURE__*/function () {\n  function DataHash() {\n    _classCallCheck(this, DataHash);\n  }\n\n  _createClass(DataHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DataHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.datahash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {DataHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.datahash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {DataHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(DataHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.datahash_from_bytes(ptr0, len0);\n      return DataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.datahash_from_bech32(ptr0, len0);\n      return DataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.datahash_from_hex(ptr0, len0);\n      return DataHash.__wrap(ret);\n    }\n  }]);\n\n  return DataHash;\n}();\n/**\n*/\n\nexport var Datum = /*#__PURE__*/function () {\n  function Datum() {\n    _classCallCheck(this, Datum);\n  }\n\n  _createClass(Datum, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_datum_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_json\",\n    value: function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.datum_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.datum_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Datum}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.datum_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {DataHash | undefined}\n    */\n\n  }, {\n    key: \"as_data_hash\",\n    value: function as_data_hash() {\n      var ret = wasm.datum_as_data_hash(this.ptr);\n      return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n    * @returns {Data | undefined}\n    */\n\n  }, {\n    key: \"as_data\",\n    value: function as_data() {\n      var ret = wasm.datum_as_data(this.ptr);\n      return ret === 0 ? undefined : Data.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Datum.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.datum_from_json(ptr0, len0);\n      return Datum.__wrap(ret);\n    }\n    /**\n    * @param {DataHash} data_hash\n    * @returns {Datum}\n    */\n\n  }, {\n    key: \"new_data_hash\",\n    value: function new_data_hash(data_hash) {\n      _assertClass(data_hash, DataHash);\n\n      var ret = wasm.datum_new_data_hash(data_hash.ptr);\n      return Datum.__wrap(ret);\n    }\n    /**\n    * @param {Data} data\n    * @returns {Datum}\n    */\n\n  }, {\n    key: \"new_data\",\n    value: function new_data(data) {\n      _assertClass(data, Data);\n\n      var ret = wasm.datum_new_data(data.ptr);\n      return Datum.__wrap(ret);\n    }\n  }]);\n\n  return Datum;\n}();\n/**\n*/\n\nexport var Ed25519KeyHash = /*#__PURE__*/function () {\n  function Ed25519KeyHash() {\n    _classCallCheck(this, Ed25519KeyHash);\n  }\n\n  _createClass(Ed25519KeyHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Ed25519KeyHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {Ed25519KeyHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Ed25519KeyHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519keyhash_from_hex(ptr0, len0);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n  }]);\n\n  return Ed25519KeyHash;\n}();\n/**\n*/\n\nexport var Ed25519KeyHashes = /*#__PURE__*/function () {\n  function Ed25519KeyHashes() {\n    _classCallCheck(this, Ed25519KeyHashes);\n  }\n\n  _createClass(Ed25519KeyHashes, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHashes}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.ed25519keyhashes_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Ed25519KeyHashes}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.ed25519keyhashes_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Ed25519KeyHash}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Ed25519KeyHash);\n\n      wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Ed25519KeyHashes.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n      return Ed25519KeyHashes.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519keyhashes_from_json(ptr0, len0);\n      return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.ed25519keyhashes_new();\n      return Ed25519KeyHashes.__wrap(ret);\n    }\n  }]);\n\n  return Ed25519KeyHashes;\n}();\n/**\n*/\n\nexport var Ed25519Signature = /*#__PURE__*/function () {\n  function Ed25519Signature() {\n    _classCallCheck(this, Ed25519Signature);\n  }\n\n  _createClass(Ed25519Signature, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519signature_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519signature_to_bech32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value: function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ed25519signature_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Ed25519Signature}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Ed25519Signature.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech32_str) {\n      var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n      return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {string} input\n    * @returns {Ed25519Signature}\n    */\n\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(input) {\n      var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n      return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519Signature}\n    */\n\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n      return Ed25519Signature.__wrap(ret);\n    }\n  }]);\n\n  return Ed25519Signature;\n}();\n/**\n*/\n\nexport var EnterpriseAddress = /*#__PURE__*/function () {\n  function EnterpriseAddress() {\n    _classCallCheck(this, EnterpriseAddress);\n  }\n\n  _createClass(EnterpriseAddress, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {EnterpriseAddress}\n    */\n\n  }, {\n    key: \"payment_cred\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function payment_cred() {\n      var ret = wasm.enterpriseaddress_payment_cred(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_address\",\n    value: function to_address() {\n      var ret = wasm.enterpriseaddress_to_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {EnterpriseAddress | undefined}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(EnterpriseAddress.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(network, payment) {\n      _assertClass(payment, StakeCredential);\n\n      var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n      return EnterpriseAddress.__wrap(ret);\n    }\n  }, {\n    key: \"from_address\",\n    value: function from_address(addr) {\n      _assertClass(addr, Address);\n\n      var ret = wasm.enterpriseaddress_from_address(addr.ptr);\n      return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n  }]);\n\n  return EnterpriseAddress;\n}();\n/**\n*/\n\nexport var ExUnitPrices = /*#__PURE__*/function () {\n  function ExUnitPrices() {\n    _classCallCheck(this, ExUnitPrices);\n  }\n\n  _createClass(ExUnitPrices, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.exunitprices_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnitPrices}\n    */\n\n  }, {\n    key: \"mem_price\",\n    value:\n    /**\n    * @returns {UnitInterval}\n    */\n    function mem_price() {\n      var ret = wasm.exunitprices_mem_price(this.ptr);\n      return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n\n  }, {\n    key: \"step_price\",\n    value: function step_price() {\n      var ret = wasm.exunitprices_step_price(this.ptr);\n      return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} mem_price\n    * @param {UnitInterval} step_price\n    * @returns {ExUnitPrices}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ExUnitPrices.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.exunitprices_from_bytes(ptr0, len0);\n      return ExUnitPrices.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(mem_price, step_price) {\n      _assertClass(mem_price, UnitInterval);\n\n      _assertClass(step_price, UnitInterval);\n\n      var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n      return ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @param {number} mem_price\n    * @param {number} step_price\n    * @returns {ExUnitPrices}\n    */\n\n  }, {\n    key: \"from_float\",\n    value: function from_float(mem_price, step_price) {\n      var ret = wasm.exunitprices_from_float(mem_price, step_price);\n      return ExUnitPrices.__wrap(ret);\n    }\n  }]);\n\n  return ExUnitPrices;\n}();\n/**\n*/\n\nexport var ExUnits = /*#__PURE__*/function () {\n  function ExUnits() {\n    _classCallCheck(this, ExUnits);\n  }\n\n  _createClass(ExUnits, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.exunits_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnits}\n    */\n\n  }, {\n    key: \"mem\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function mem() {\n      var ret = wasm.exunits_mem(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"steps\",\n    value: function steps() {\n      var ret = wasm.exunits_steps(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} mem\n    * @param {BigNum} steps\n    * @returns {ExUnits}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ExUnits.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.exunits_from_bytes(ptr0, len0);\n      return ExUnits.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(mem, steps) {\n      _assertClass(mem, BigNum);\n\n      _assertClass(steps, BigNum);\n\n      var ret = wasm.exunits_new(mem.ptr, steps.ptr);\n      return ExUnits.__wrap(ret);\n    }\n  }]);\n\n  return ExUnits;\n}();\n/**\n*/\n\nexport var GeneralTransactionMetadata = /*#__PURE__*/function () {\n  function GeneralTransactionMetadata() {\n    _classCallCheck(this, GeneralTransactionMetadata);\n  }\n\n  _createClass(GeneralTransactionMetadata, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GeneralTransactionMetadata}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.generaltransactionmetadata_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.generaltransactionmetadata_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {GeneralTransactionMetadata}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.generaltransactionmetadata_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, BigNum);\n\n      _assertClass(value, TransactionMetadatum);\n\n      var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key\n    * @returns {TransactionMetadatum | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, BigNum);\n\n      var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n      return TransactionMetadatumLabels.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(GeneralTransactionMetadata.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n      return GeneralTransactionMetadata.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.generaltransactionmetadata_from_json(ptr0, len0);\n      return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.generaltransactionmetadata_new();\n      return GeneralTransactionMetadata.__wrap(ret);\n    }\n  }]);\n\n  return GeneralTransactionMetadata;\n}();\n/**\n*/\n\nexport var GenesisDelegateHash = /*#__PURE__*/function () {\n  function GenesisDelegateHash() {\n    _classCallCheck(this, GenesisDelegateHash);\n  }\n\n  _createClass(GenesisDelegateHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisDelegateHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesisdelegatehash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisDelegateHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesisdelegatehash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {GenesisDelegateHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(GenesisDelegateHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n      return GenesisDelegateHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n      return GenesisDelegateHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesisdelegatehash_from_hex(ptr0, len0);\n      return GenesisDelegateHash.__wrap(ret);\n    }\n  }]);\n\n  return GenesisDelegateHash;\n}();\n/**\n*/\n\nexport var GenesisHash = /*#__PURE__*/function () {\n  function GenesisHash() {\n    _classCallCheck(this, GenesisHash);\n  }\n\n  _createClass(GenesisHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesishash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesishash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {GenesisHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(GenesisHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesishash_from_bytes(ptr0, len0);\n      return GenesisHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesishash_from_bech32(ptr0, len0);\n      return GenesisHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesishash_from_hex(ptr0, len0);\n      return GenesisHash.__wrap(ret);\n    }\n  }]);\n\n  return GenesisHash;\n}();\n/**\n*/\n\nexport var GenesisHashes = /*#__PURE__*/function () {\n  function GenesisHashes() {\n    _classCallCheck(this, GenesisHashes);\n  }\n\n  _createClass(GenesisHashes, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesishashes_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHashes}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesishashes_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.genesishashes_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {GenesisHashes}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.genesishashes_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {GenesisHash}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.genesishashes_get(this.ptr, index);\n      return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, GenesisHash);\n\n      wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(GenesisHashes.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n      return GenesisHashes.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesishashes_from_json(ptr0, len0);\n      return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.genesishashes_new();\n      return GenesisHashes.__wrap(ret);\n    }\n  }]);\n\n  return GenesisHashes;\n}();\n/**\n*/\n\nexport var GenesisKeyDelegation = /*#__PURE__*/function () {\n  function GenesisKeyDelegation() {\n    _classCallCheck(this, GenesisKeyDelegation);\n  }\n\n  _createClass(GenesisKeyDelegation, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisKeyDelegation}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.genesiskeydelegation_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.genesiskeydelegation_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {GenesisKeyDelegation}\n    */\n\n  }, {\n    key: \"genesishash\",\n    value:\n    /**\n    * @returns {GenesisHash}\n    */\n    function genesishash() {\n      var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n      return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisDelegateHash}\n    */\n\n  }, {\n    key: \"genesis_delegate_hash\",\n    value: function genesis_delegate_hash() {\n      var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n      return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n\n  }, {\n    key: \"vrf_keyhash\",\n    value: function vrf_keyhash() {\n      var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n      return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} genesishash\n    * @param {GenesisDelegateHash} genesis_delegate_hash\n    * @param {VRFKeyHash} vrf_keyhash\n    * @returns {GenesisKeyDelegation}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(GenesisKeyDelegation.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n      return GenesisKeyDelegation.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.genesiskeydelegation_from_json(ptr0, len0);\n      return GenesisKeyDelegation.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n      _assertClass(genesishash, GenesisHash);\n\n      _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n\n      _assertClass(vrf_keyhash, VRFKeyHash);\n\n      var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n      return GenesisKeyDelegation.__wrap(ret);\n    }\n  }]);\n\n  return GenesisKeyDelegation;\n}();\n/**\n*/\n\nexport var Header = /*#__PURE__*/function () {\n  function Header() {\n    _classCallCheck(this, Header);\n  }\n\n  _createClass(Header, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_header_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.header_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Header}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.header_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.header_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Header}\n    */\n\n  }, {\n    key: \"header_body\",\n    value:\n    /**\n    * @returns {HeaderBody}\n    */\n    function header_body() {\n      var ret = wasm.header_header_body(this.ptr);\n      return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {KESSignature}\n    */\n\n  }, {\n    key: \"body_signature\",\n    value: function body_signature() {\n      var ret = wasm.header_body_signature(this.ptr);\n      return KESSignature.__wrap(ret);\n    }\n    /**\n    * @param {HeaderBody} header_body\n    * @param {KESSignature} body_signature\n    * @returns {Header}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Header.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.header_from_bytes(ptr0, len0);\n      return Header.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.header_from_json(ptr0, len0);\n      return Header.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(header_body, body_signature) {\n      _assertClass(header_body, HeaderBody);\n\n      _assertClass(body_signature, KESSignature);\n\n      var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n      return Header.__wrap(ret);\n    }\n  }]);\n\n  return Header;\n}();\n/**\n*/\n\nexport var HeaderBody = /*#__PURE__*/function () {\n  function HeaderBody() {\n    _classCallCheck(this, HeaderBody);\n  }\n\n  _createClass(HeaderBody, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.headerbody_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderBody}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.headerbody_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.headerbody_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {HeaderBody}\n    */\n\n  }, {\n    key: \"block_number\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function block_number() {\n      var ret = wasm.headerbody_block_number(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"slot\",\n    value: function slot() {\n      var ret = wasm.headerbody_slot(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BlockHash | undefined}\n    */\n\n  }, {\n    key: \"prev_hash\",\n    value: function prev_hash() {\n      var ret = wasm.headerbody_prev_hash(this.ptr);\n      return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n\n  }, {\n    key: \"issuer_vkey\",\n    value: function issuer_vkey() {\n      var ret = wasm.headerbody_issuer_vkey(this.ptr);\n      return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFVKey}\n    */\n\n  }, {\n    key: \"vrf_vkey\",\n    value: function vrf_vkey() {\n      var ret = wasm.headerbody_vrf_vkey(this.ptr);\n      return VRFVKey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n\n  }, {\n    key: \"nonce_vrf\",\n    value: function nonce_vrf() {\n      var ret = wasm.headerbody_nonce_vrf(this.ptr);\n      return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {VRFCert}\n    */\n\n  }, {\n    key: \"leader_vrf\",\n    value: function leader_vrf() {\n      var ret = wasm.headerbody_leader_vrf(this.ptr);\n      return VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"block_body_size\",\n    value: function block_body_size() {\n      var ret = wasm.headerbody_block_body_size(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash}\n    */\n\n  }, {\n    key: \"block_body_hash\",\n    value: function block_body_hash() {\n      var ret = wasm.headerbody_block_body_hash(this.ptr);\n      return BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {OperationalCert}\n    */\n\n  }, {\n    key: \"operational_cert\",\n    value: function operational_cert() {\n      var ret = wasm.headerbody_operational_cert(this.ptr);\n      return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersion}\n    */\n\n  }, {\n    key: \"protocol_version\",\n    value: function protocol_version() {\n      var ret = wasm.headerbody_protocol_version(this.ptr);\n      return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {number} block_number\n    * @param {BigNum} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} nonce_vrf\n    * @param {VRFCert} leader_vrf\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(HeaderBody.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.headerbody_from_bytes(ptr0, len0);\n      return HeaderBody.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.headerbody_from_json(ptr0, len0);\n      return HeaderBody.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n      _assertClass(slot, BigNum);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(prev_hash)) {\n        _assertClass(prev_hash, BlockHash);\n\n        ptr0 = prev_hash.ptr;\n        prev_hash.ptr = 0;\n      }\n\n      _assertClass(issuer_vkey, Vkey);\n\n      _assertClass(vrf_vkey, VRFVKey);\n\n      _assertClass(nonce_vrf, VRFCert);\n\n      _assertClass(leader_vrf, VRFCert);\n\n      _assertClass(block_body_hash, BlockHash);\n\n      _assertClass(operational_cert, OperationalCert);\n\n      _assertClass(protocol_version, ProtocolVersion);\n\n      var ret = wasm.headerbody_new(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n      return HeaderBody.__wrap(ret);\n    }\n  }]);\n\n  return HeaderBody;\n}();\n/**\n*/\n\nexport var Int = /*#__PURE__*/function () {\n  function Int() {\n    _classCallCheck(this, Int);\n  }\n\n  _createClass(Int, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_int_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.int_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"is_positive\",\n    value:\n    /**\n    * @returns {boolean}\n    */\n    function is_positive() {\n      var ret = wasm.int_is_positive(this.ptr);\n      return ret !== 0;\n    }\n    /**\n    * BigNum can only contain unsigned u64 values\n    *\n    * This function will return the BigNum representation\n    * only in case the underlying i128 value is positive.\n    *\n    * Otherwise nothing will be returned (undefined).\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"as_positive\",\n    value: function as_positive() {\n      var ret = wasm.int_as_positive(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * BigNum can only contain unsigned u64 values\n    *\n    * This function will return the *absolute* BigNum representation\n    * only in case the underlying i128 value is negative.\n    *\n    * Otherwise nothing will be returned (undefined).\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"as_negative\",\n    value: function as_negative() {\n      var ret = wasm.int_as_negative(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns an i32 value in case the underlying original i128 value is within the limits.\n    * Otherwise will just return an empty value (undefined).\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"as_i32\",\n    value: function as_i32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.int_as_i32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * Returns the underlying value converted to i32 if possible (within limits)\n    * Otherwise will just return an empty value (undefined).\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"as_i32_or_nothing\",\n    value: function as_i32_or_nothing() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.int_as_i32_or_nothing(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * Returns the underlying value converted to i32 if possible (within limits)\n    * JsError in case of out of boundary overflow\n    * @returns {number}\n    */\n\n  }, {\n    key: \"as_i32_or_fail\",\n    value: function as_i32_or_fail() {\n      var ret = wasm.int_as_i32_or_fail(this.ptr);\n      return ret;\n    }\n    /**\n    * Returns string representation of the underlying i128 value directly.\n    * Might contain the minus sign (-) in case of negative value.\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_str\",\n    value: function to_str() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.int_to_str(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} string\n    * @returns {Int}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Int.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.int_from_bytes(ptr0, len0);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(x) {\n      _assertClass(x, BigNum);\n\n      var ret = wasm.int_new(x.ptr);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"new_negative\",\n    value: function new_negative(x) {\n      _assertClass(x, BigNum);\n\n      var ret = wasm.int_new_negative(x.ptr);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"new_i32\",\n    value: function new_i32(x) {\n      var ret = wasm.int_new_i32(x);\n      return Int.__wrap(ret);\n    }\n  }, {\n    key: \"from_str\",\n    value: function from_str(string) {\n      var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.int_from_str(ptr0, len0);\n      return Int.__wrap(ret);\n    }\n  }]);\n\n  return Int;\n}();\n/**\n*/\n\nexport var Ipv4 = /*#__PURE__*/function () {\n  function Ipv4() {\n    _classCallCheck(this, Ipv4);\n  }\n\n  _createClass(Ipv4, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv4_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv4}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv4_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.ipv4_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Ipv4}\n    */\n\n  }, {\n    key: \"ip\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function ip() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv4_ip(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Ipv4.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv4_from_bytes(ptr0, len0);\n      return Ipv4.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv4_from_json(ptr0, len0);\n      return Ipv4.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv4}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(data) {\n      var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv4_new(ptr0, len0);\n      return Ipv4.__wrap(ret);\n    }\n  }]);\n\n  return Ipv4;\n}();\n/**\n*/\n\nexport var Ipv6 = /*#__PURE__*/function () {\n  function Ipv6() {\n    _classCallCheck(this, Ipv6);\n  }\n\n  _createClass(Ipv6, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv6_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv6}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv6_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.ipv6_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Ipv6}\n    */\n\n  }, {\n    key: \"ip\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function ip() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.ipv6_ip(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Ipv6.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv6_from_bytes(ptr0, len0);\n      return Ipv6.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv6_from_json(ptr0, len0);\n      return Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv6}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(data) {\n      var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.ipv6_new(ptr0, len0);\n      return Ipv6.__wrap(ret);\n    }\n  }]);\n\n  return Ipv6;\n}();\n/**\n*/\n\nexport var KESSignature = /*#__PURE__*/function () {\n  function KESSignature() {\n    _classCallCheck(this, KESSignature);\n  }\n\n  _createClass(KESSignature, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.kessignature_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESSignature}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(KESSignature.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.kessignature_from_bytes(ptr0, len0);\n      return KESSignature.__wrap(ret);\n    }\n  }]);\n\n  return KESSignature;\n}();\n/**\n*/\n\nexport var KESVKey = /*#__PURE__*/function () {\n  function KESVKey() {\n    _classCallCheck(this, KESVKey);\n  }\n\n  _createClass(KESVKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESVKey}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.kesvkey_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {KESVKey}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.kesvkey_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {KESVKey}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(KESVKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n      return KESVKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n      return KESVKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.kesvkey_from_hex(ptr0, len0);\n      return KESVKey.__wrap(ret);\n    }\n  }]);\n\n  return KESVKey;\n}();\n/**\n*/\n\nexport var Language = /*#__PURE__*/function () {\n  function Language() {\n    _classCallCheck(this, Language);\n  }\n\n  _createClass(Language, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_language_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.language_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Language}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.language_kind(this.ptr);\n      return ret >>> 0;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Language.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.language_from_bytes(ptr0, len0);\n      return Language.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n\n  }, {\n    key: \"new_plutus_v1\",\n    value: function new_plutus_v1() {\n      var ret = wasm.language_new_plutus_v1();\n      return Language.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n\n  }, {\n    key: \"new_plutus_v2\",\n    value: function new_plutus_v2() {\n      var ret = wasm.language_new_plutus_v2();\n      return Language.__wrap(ret);\n    }\n  }]);\n\n  return Language;\n}();\n/**\n*/\n\nexport var Languages = /*#__PURE__*/function () {\n  function Languages() {\n    _classCallCheck(this, Languages);\n  }\n\n  _createClass(Languages, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_languages_free(ptr);\n    }\n    /**\n    * @returns {Languages}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.languages_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Language}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.languages_get(this.ptr, index);\n      return Language.__wrap(ret);\n    }\n    /**\n    * @param {Language} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Language);\n\n      var ptr0 = elem.ptr;\n      elem.ptr = 0;\n      wasm.languages_add(this.ptr, ptr0);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Languages.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.languages_new();\n      return Languages.__wrap(ret);\n    }\n  }]);\n\n  return Languages;\n}();\n/**\n*/\n\nexport var LegacyDaedalusPrivateKey = /*#__PURE__*/function () {\n  function LegacyDaedalusPrivateKey() {\n    _classCallCheck(this, LegacyDaedalusPrivateKey);\n  }\n\n  _createClass(LegacyDaedalusPrivateKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {LegacyDaedalusPrivateKey}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"chaincode\",\n    value: function chaincode() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n      return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n  }]);\n\n  return LegacyDaedalusPrivateKey;\n}();\n/**\n*/\n\nexport var LinearFee = /*#__PURE__*/function () {\n  function LinearFee() {\n    _classCallCheck(this, LinearFee);\n  }\n\n  _createClass(LinearFee, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"constant\",\n    value: function constant() {\n      var ret = wasm.linearfee_constant(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"coefficient\",\n    value: function coefficient() {\n      var ret = wasm.linearfee_coefficient(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coefficient\n    * @param {BigNum} constant\n    * @returns {LinearFee}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(LinearFee.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(coefficient, constant) {\n      _assertClass(coefficient, BigNum);\n\n      _assertClass(constant, BigNum);\n\n      var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n      return LinearFee.__wrap(ret);\n    }\n  }]);\n\n  return LinearFee;\n}();\n/**\n*/\n\nexport var MIRToStakeCredentials = /*#__PURE__*/function () {\n  function MIRToStakeCredentials() {\n    _classCallCheck(this, MIRToStakeCredentials);\n  }\n\n  _createClass(MIRToStakeCredentials, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MIRToStakeCredentials}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.mirtostakecredentials_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.mirtostakecredentials_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {MIRToStakeCredentials}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.mirtostakecredentials_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @param {Int} delta\n    * @returns {Int | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(cred, delta) {\n      _assertClass(cred, StakeCredential);\n\n      _assertClass(delta, Int);\n\n      var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n      return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @returns {Int | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(cred) {\n      _assertClass(cred, StakeCredential);\n\n      var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n      return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.mirtostakecredentials_keys(this.ptr);\n      return StakeCredentials.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MIRToStakeCredentials.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\n      return MIRToStakeCredentials.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.mirtostakecredentials_from_json(ptr0, len0);\n      return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.mirtostakecredentials_new();\n      return MIRToStakeCredentials.__wrap(ret);\n    }\n  }]);\n\n  return MIRToStakeCredentials;\n}();\n/**\n*/\n\nexport var MetadataList = /*#__PURE__*/function () {\n  function MetadataList() {\n    _classCallCheck(this, MetadataList);\n  }\n\n  _createClass(MetadataList, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.metadatalist_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataList}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.metadatalist_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.metadatalist_get(this.ptr, index);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionMetadatum);\n\n      wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MetadataList.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n      return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.metadatalist_new();\n      return MetadataList.__wrap(ret);\n    }\n  }]);\n\n  return MetadataList;\n}();\n/**\n*/\n\nexport var MetadataMap = /*#__PURE__*/function () {\n  function MetadataMap() {\n    _classCallCheck(this, MetadataMap);\n  }\n\n  _createClass(MetadataMap, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.metadatamap_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataMap}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.metadatamap_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, TransactionMetadatum);\n\n      _assertClass(value, TransactionMetadatum);\n\n      var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n\n  }, {\n    key: \"insert_str\",\n    value: function insert_str(key, value) {\n      var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n\n      _assertClass(value, TransactionMetadatum);\n\n      var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n      return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n\n  }, {\n    key: \"insert_i32\",\n    value: function insert_i32(key, value) {\n      _assertClass(value, TransactionMetadatum);\n\n      var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n      return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, TransactionMetadatum);\n\n      var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"get_str\",\n    value: function get_str(key) {\n      var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"get_i32\",\n    value: function get_i32(key) {\n      var ret = wasm.metadatamap_get_i32(this.ptr, key);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {boolean}\n    */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      _assertClass(key, TransactionMetadatum);\n\n      var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {MetadataList}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.metadatamap_keys(this.ptr);\n      return MetadataList.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MetadataMap.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n      return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.metadatamap_new();\n      return MetadataMap.__wrap(ret);\n    }\n  }]);\n\n  return MetadataMap;\n}();\n/**\n*/\n\nexport var Mint = /*#__PURE__*/function () {\n  function Mint() {\n    _classCallCheck(this, Mint);\n  }\n\n  _createClass(Mint, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_mint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.mint_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Mint}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.mint_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.mint_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Mint}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.mint_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {MintAssets | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, ScriptHash);\n\n      _assertClass(value, MintAssets);\n\n      var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {MintAssets | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, ScriptHash);\n\n      var ret = wasm.mint_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.mint_keys(this.ptr);\n      return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * Returns the multiasset where only positive (minting) entries are present\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"as_positive_multiasset\",\n    value: function as_positive_multiasset() {\n      var ret = wasm.mint_as_positive_multiasset(this.ptr);\n      return MultiAsset.__wrap(ret);\n    }\n    /**\n    * Returns the multiasset where only negative (burning) entries are present\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"as_negative_multiasset\",\n    value: function as_negative_multiasset() {\n      var ret = wasm.mint_as_negative_multiasset(this.ptr);\n      return MultiAsset.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Mint.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.mint_from_bytes(ptr0, len0);\n      return Mint.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.mint_from_json(ptr0, len0);\n      return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {Mint}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.mint_new();\n      return Mint.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {Mint}\n    */\n\n  }, {\n    key: \"new_from_entry\",\n    value: function new_from_entry(key, value) {\n      _assertClass(key, ScriptHash);\n\n      _assertClass(value, MintAssets);\n\n      var ret = wasm.mint_new_from_entry(key.ptr, value.ptr);\n      return Mint.__wrap(ret);\n    }\n  }]);\n\n  return Mint;\n}();\n/**\n*/\n\nexport var MintAssets = /*#__PURE__*/function () {\n  function MintAssets() {\n    _classCallCheck(this, MintAssets);\n  }\n\n  _createClass(MintAssets, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n    * @returns {MintAssets}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.mintassets_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {Int | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, AssetName);\n\n      _assertClass(value, Int);\n\n      var ptr0 = value.ptr;\n      value.ptr = 0;\n      var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n      return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {Int | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, AssetName);\n\n      var ret = wasm.mintassets_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.mintassets_keys(this.ptr);\n      return AssetNames.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MintAssets.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.mintassets_new();\n      return MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {MintAssets}\n    */\n\n  }, {\n    key: \"new_from_entry\",\n    value: function new_from_entry(key, value) {\n      _assertClass(key, AssetName);\n\n      _assertClass(value, Int);\n\n      var ptr0 = value.ptr;\n      value.ptr = 0;\n      var ret = wasm.mintassets_new_from_entry(key.ptr, ptr0);\n      return MintAssets.__wrap(ret);\n    }\n  }]);\n\n  return MintAssets;\n}();\n/**\n*/\n\nexport var MoveInstantaneousReward = /*#__PURE__*/function () {\n  function MoveInstantaneousReward() {\n    _classCallCheck(this, MoveInstantaneousReward);\n  }\n\n  _createClass(MoveInstantaneousReward, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousReward}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.moveinstantaneousreward_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.moveinstantaneousreward_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {MoveInstantaneousReward}\n    */\n\n  }, {\n    key: \"pot\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function pot() {\n      var ret = wasm.moveinstantaneousreward_pot(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"kind\",\n    value: function kind() {\n      var ret = wasm.moveinstantaneousreward_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"as_to_other_pot\",\n    value: function as_to_other_pot() {\n      var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials | undefined}\n    */\n\n  }, {\n    key: \"as_to_stake_creds\",\n    value: function as_to_stake_creds() {\n      var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n      return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MoveInstantaneousReward.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n      return MoveInstantaneousReward.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.moveinstantaneousreward_from_json(ptr0, len0);\n      return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {BigNum} amount\n    * @returns {MoveInstantaneousReward}\n    */\n\n  }, {\n    key: \"new_to_other_pot\",\n    value: function new_to_other_pot(pot, amount) {\n      _assertClass(amount, BigNum);\n\n      var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n      return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {MIRToStakeCredentials} amounts\n    * @returns {MoveInstantaneousReward}\n    */\n\n  }, {\n    key: \"new_to_stake_creds\",\n    value: function new_to_stake_creds(pot, amounts) {\n      _assertClass(amounts, MIRToStakeCredentials);\n\n      var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n      return MoveInstantaneousReward.__wrap(ret);\n    }\n  }]);\n\n  return MoveInstantaneousReward;\n}();\n/**\n*/\n\nexport var MoveInstantaneousRewardsCert = /*#__PURE__*/function () {\n  function MoveInstantaneousRewardsCert() {\n    _classCallCheck(this, MoveInstantaneousRewardsCert);\n  }\n\n  _createClass(MoveInstantaneousRewardsCert, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.moveinstantaneousrewardscert_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n\n  }, {\n    key: \"move_instantaneous_reward\",\n    value:\n    /**\n    * @returns {MoveInstantaneousReward}\n    */\n    function move_instantaneous_reward() {\n      var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n      return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n      return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.moveinstantaneousrewardscert_from_json(ptr0, len0);\n      return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(move_instantaneous_reward) {\n      _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n\n      var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n      return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n  }]);\n\n  return MoveInstantaneousRewardsCert;\n}();\n/**\n*/\n\nexport var MultiAsset = /*#__PURE__*/function () {\n  function MultiAsset() {\n    _classCallCheck(this, MultiAsset);\n  }\n\n  _createClass(MultiAsset, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.multiasset_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.multiasset_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.multiasset_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * the number of unique policy IDs in the multiasset\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.multiasset_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n    * @param {ScriptHash} policy_id\n    * @param {Assets} assets\n    * @returns {Assets | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(policy_id, assets) {\n      _assertClass(policy_id, ScriptHash);\n\n      _assertClass(assets, Assets);\n\n      var ret = wasm.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n      return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n    * @param {ScriptHash} policy_id\n    * @returns {Assets | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(policy_id) {\n      _assertClass(policy_id, ScriptHash);\n\n      var ret = wasm.multiasset_get(this.ptr, policy_id.ptr);\n      return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * sets the asset {asset_name} to {value} under policy {policy_id}\n    * returns the previous amount if it was set, or else None (undefined in JS)\n    * @param {ScriptHash} policy_id\n    * @param {AssetName} asset_name\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"set_asset\",\n    value: function set_asset(policy_id, asset_name, value) {\n      _assertClass(policy_id, ScriptHash);\n\n      _assertClass(asset_name, AssetName);\n\n      _assertClass(value, BigNum);\n\n      var ptr0 = value.ptr;\n      value.ptr = 0;\n      var ret = wasm.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * returns the amount of asset {asset_name} under policy {policy_id}\n    * If such an asset does not exist, 0 is returned.\n    * @param {ScriptHash} policy_id\n    * @param {AssetName} asset_name\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"get_asset\",\n    value: function get_asset(policy_id, asset_name) {\n      _assertClass(policy_id, ScriptHash);\n\n      _assertClass(asset_name, AssetName);\n\n      var ret = wasm.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * returns all policy IDs used by assets in this multiasset\n    * @returns {ScriptHashes}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.multiasset_keys(this.ptr);\n      return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * removes an asset from the list if the result is 0 or less\n    * does not modify this object, instead the result is returned\n    * @param {MultiAsset} rhs_ma\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"sub\",\n    value: function sub(rhs_ma) {\n      _assertClass(rhs_ma, MultiAsset);\n\n      var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n      return MultiAsset.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MultiAsset.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.multiasset_from_bytes(ptr0, len0);\n      return MultiAsset.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.multiasset_from_json(ptr0, len0);\n      return MultiAsset.__wrap(ret);\n    }\n    /**\n    * @returns {MultiAsset}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.multiasset_new();\n      return MultiAsset.__wrap(ret);\n    }\n  }]);\n\n  return MultiAsset;\n}();\n/**\n*/\n\nexport var MultiHostName = /*#__PURE__*/function () {\n  function MultiHostName() {\n    _classCallCheck(this, MultiHostName);\n  }\n\n  _createClass(MultiHostName, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.multihostname_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiHostName}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.multihostname_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.multihostname_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {MultiHostName}\n    */\n\n  }, {\n    key: \"dns_name\",\n    value:\n    /**\n    * @returns {DNSRecordSRV}\n    */\n    function dns_name() {\n      var ret = wasm.multihostname_dns_name(this.ptr);\n      return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {DNSRecordSRV} dns_name\n    * @returns {MultiHostName}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(MultiHostName.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.multihostname_from_bytes(ptr0, len0);\n      return MultiHostName.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.multihostname_from_json(ptr0, len0);\n      return MultiHostName.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(dns_name) {\n      _assertClass(dns_name, DNSRecordSRV);\n\n      var ret = wasm.multihostname_new(dns_name.ptr);\n      return MultiHostName.__wrap(ret);\n    }\n  }]);\n\n  return MultiHostName;\n}();\n/**\n*/\n\nexport var NativeScript = /*#__PURE__*/function () {\n  function NativeScript() {\n    _classCallCheck(this, NativeScript);\n  }\n\n  _createClass(NativeScript, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.nativescript_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.nativescript_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.nativescript_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"hash\",\n    value:\n    /**\n    * @param {number} namespace\n    * @returns {ScriptHash}\n    */\n    function hash(namespace) {\n      var ret = wasm.nativescript_hash(this.ptr, namespace);\n      return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptPubkey} script_pubkey\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.nativescript_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {ScriptPubkey | undefined}\n    */\n\n  }, {\n    key: \"as_script_pubkey\",\n    value: function as_script_pubkey() {\n      var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n      return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAll | undefined}\n    */\n\n  }, {\n    key: \"as_script_all\",\n    value: function as_script_all() {\n      var ret = wasm.nativescript_as_script_all(this.ptr);\n      return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAny | undefined}\n    */\n\n  }, {\n    key: \"as_script_any\",\n    value: function as_script_any() {\n      var ret = wasm.nativescript_as_script_any(this.ptr);\n      return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptNOfK | undefined}\n    */\n\n  }, {\n    key: \"as_script_n_of_k\",\n    value: function as_script_n_of_k() {\n      var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n      return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockStart | undefined}\n    */\n\n  }, {\n    key: \"as_timelock_start\",\n    value: function as_timelock_start() {\n      var ret = wasm.nativescript_as_timelock_start(this.ptr);\n      return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockExpiry | undefined}\n    */\n\n  }, {\n    key: \"as_timelock_expiry\",\n    value: function as_timelock_expiry() {\n      var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n      return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * Returns an array of unique Ed25519KeyHashes\n    * contained within this script recursively on any depth level.\n    * The order of the keys in the result is not determined in any way.\n    * @returns {Ed25519KeyHashes}\n    */\n\n  }, {\n    key: \"get_required_signers\",\n    value: function get_required_signers() {\n      var ret = wasm.nativescript_get_required_signers(this.ptr);\n      return Ed25519KeyHashes.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(NativeScript.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.nativescript_from_bytes(ptr0, len0);\n      return NativeScript.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.nativescript_from_json(ptr0, len0);\n      return NativeScript.__wrap(ret);\n    }\n  }, {\n    key: \"new_script_pubkey\",\n    value: function new_script_pubkey(script_pubkey) {\n      _assertClass(script_pubkey, ScriptPubkey);\n\n      var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAll} script_all\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"new_script_all\",\n    value: function new_script_all(script_all) {\n      _assertClass(script_all, ScriptAll);\n\n      var ret = wasm.nativescript_new_script_all(script_all.ptr);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAny} script_any\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"new_script_any\",\n    value: function new_script_any(script_any) {\n      _assertClass(script_any, ScriptAny);\n\n      var ret = wasm.nativescript_new_script_any(script_any.ptr);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptNOfK} script_n_of_k\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"new_script_n_of_k\",\n    value: function new_script_n_of_k(script_n_of_k) {\n      _assertClass(script_n_of_k, ScriptNOfK);\n\n      var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockStart} timelock_start\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"new_timelock_start\",\n    value: function new_timelock_start(timelock_start) {\n      _assertClass(timelock_start, TimelockStart);\n\n      var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockExpiry} timelock_expiry\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"new_timelock_expiry\",\n    value: function new_timelock_expiry(timelock_expiry) {\n      _assertClass(timelock_expiry, TimelockExpiry);\n\n      var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n      return NativeScript.__wrap(ret);\n    }\n  }]);\n\n  return NativeScript;\n}();\n/**\n*/\n\nexport var NativeScripts = /*#__PURE__*/function () {\n  function NativeScripts() {\n    _classCallCheck(this, NativeScripts);\n  }\n\n  _createClass(NativeScripts, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.nativescripts_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {NativeScript}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.nativescripts_get(this.ptr, index);\n      return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, NativeScript);\n\n      wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(NativeScripts.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.nativescripts_new();\n      return NativeScripts.__wrap(ret);\n    }\n  }]);\n\n  return NativeScripts;\n}();\n/**\n*/\n\nexport var NetworkId = /*#__PURE__*/function () {\n  function NetworkId() {\n    _classCallCheck(this, NetworkId);\n  }\n\n  _createClass(NetworkId, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.networkid_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NetworkId}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.networkid_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.networkid_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {NetworkId}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.networkid_kind(this.ptr);\n      return ret >>> 0;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(NetworkId.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.networkid_from_bytes(ptr0, len0);\n      return NetworkId.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.networkid_from_json(ptr0, len0);\n      return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n\n  }, {\n    key: \"testnet\",\n    value: function testnet() {\n      var ret = wasm.networkid_testnet();\n      return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n\n  }, {\n    key: \"mainnet\",\n    value: function mainnet() {\n      var ret = wasm.networkid_mainnet();\n      return NetworkId.__wrap(ret);\n    }\n  }]);\n\n  return NetworkId;\n}();\n/**\n*/\n\nexport var NetworkInfo = /*#__PURE__*/function () {\n  function NetworkInfo() {\n    _classCallCheck(this, NetworkInfo);\n  }\n\n  _createClass(NetworkInfo, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n    * @param {number} network_id\n    * @param {number} protocol_magic\n    * @returns {NetworkInfo}\n    */\n\n  }, {\n    key: \"network_id\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function network_id() {\n      var ret = wasm.networkinfo_network_id(this.ptr);\n      return ret;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"protocol_magic\",\n    value: function protocol_magic() {\n      var ret = wasm.networkinfo_protocol_magic(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(NetworkInfo.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(network_id, protocol_magic) {\n      var ret = wasm.networkinfo_new(network_id, protocol_magic);\n      return NetworkInfo.__wrap(ret);\n    }\n  }, {\n    key: \"testnet\",\n    value: function testnet() {\n      var ret = wasm.networkinfo_testnet();\n      return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n\n  }, {\n    key: \"mainnet\",\n    value: function mainnet() {\n      var ret = wasm.networkinfo_mainnet();\n      return NetworkInfo.__wrap(ret);\n    }\n  }]);\n\n  return NetworkInfo;\n}();\n/**\n*/\n\nexport var Nonce = /*#__PURE__*/function () {\n  function Nonce() {\n    _classCallCheck(this, Nonce);\n  }\n\n  _createClass(Nonce, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.nonce_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Nonce}\n    */\n\n  }, {\n    key: \"get_hash\",\n    value:\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    function get_hash() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.nonce_get_hash(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0;\n\n        if (r0 !== 0) {\n          v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n          wasm.__wbindgen_free(r0, r1 * 1);\n        }\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Nonce.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.nonce_from_bytes(ptr0, len0);\n      return Nonce.__wrap(ret);\n    }\n    /**\n    * @returns {Nonce}\n    */\n\n  }, {\n    key: \"new_identity\",\n    value: function new_identity() {\n      var ret = wasm.nonce_new_identity();\n      return Nonce.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} hash\n    * @returns {Nonce}\n    */\n\n  }, {\n    key: \"new_from_hash\",\n    value: function new_from_hash(hash) {\n      var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.nonce_new_from_hash(ptr0, len0);\n      return Nonce.__wrap(ret);\n    }\n  }]);\n\n  return Nonce;\n}();\n/**\n*/\n\nexport var OperationalCert = /*#__PURE__*/function () {\n  function OperationalCert() {\n    _classCallCheck(this, OperationalCert);\n  }\n\n  _createClass(OperationalCert, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.operationalcert_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {OperationalCert}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.operationalcert_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.operationalcert_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {OperationalCert}\n    */\n\n  }, {\n    key: \"hot_vkey\",\n    value:\n    /**\n    * @returns {KESVKey}\n    */\n    function hot_vkey() {\n      var ret = wasm.operationalcert_hot_vkey(this.ptr);\n      return KESVKey.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"sequence_number\",\n    value: function sequence_number() {\n      var ret = wasm.operationalcert_sequence_number(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"kes_period\",\n    value: function kes_period() {\n      var ret = wasm.operationalcert_kes_period(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n\n  }, {\n    key: \"sigma\",\n    value: function sigma() {\n      var ret = wasm.operationalcert_sigma(this.ptr);\n      return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {KESVKey} hot_vkey\n    * @param {number} sequence_number\n    * @param {number} kes_period\n    * @param {Ed25519Signature} sigma\n    * @returns {OperationalCert}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(OperationalCert.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n      return OperationalCert.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.operationalcert_from_json(ptr0, len0);\n      return OperationalCert.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(hot_vkey, sequence_number, kes_period, sigma) {\n      _assertClass(hot_vkey, KESVKey);\n\n      _assertClass(sigma, Ed25519Signature);\n\n      var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n      return OperationalCert.__wrap(ret);\n    }\n  }]);\n\n  return OperationalCert;\n}();\n/**\n*/\n\nexport var PlutusData = /*#__PURE__*/function () {\n  function PlutusData() {\n    _classCallCheck(this, PlutusData);\n  }\n\n  _createClass(PlutusData, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusdata_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.plutusdata_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {ConstrPlutusData | undefined}\n    */\n\n  }, {\n    key: \"as_constr_plutus_data\",\n    value: function as_constr_plutus_data() {\n      var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n      return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap | undefined}\n    */\n\n  }, {\n    key: \"as_map\",\n    value: function as_map() {\n      var ret = wasm.plutusdata_as_map(this.ptr);\n      return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n\n  }, {\n    key: \"as_list\",\n    value: function as_list() {\n      var ret = wasm.plutusdata_as_list(this.ptr);\n      return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt | undefined}\n    */\n\n  }, {\n    key: \"as_integer\",\n    value: function as_integer() {\n      var ret = wasm.plutusdata_as_integer(this.ptr);\n      return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value: function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusdata_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0;\n\n        if (r0 !== 0) {\n          v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n          wasm.__wbindgen_free(r0, r1 * 1);\n        }\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusData.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusdata_from_bytes(ptr0, len0);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {ConstrPlutusData} constr_plutus_data\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"new_constr_plutus_data\",\n    value: function new_constr_plutus_data(constr_plutus_data) {\n      _assertClass(constr_plutus_data, ConstrPlutusData);\n\n      var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusMap} map\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"new_map\",\n    value: function new_map(map) {\n      _assertClass(map, PlutusMap);\n\n      var ret = wasm.plutusdata_new_map(map.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} list\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"new_list\",\n    value: function new_list(list) {\n      _assertClass(list, PlutusList);\n\n      var ret = wasm.plutusdata_new_list(list.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} integer\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"new_integer\",\n    value: function new_integer(integer) {\n      _assertClass(integer, BigInt);\n\n      var ret = wasm.plutusdata_new_integer(integer.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"new_bytes\",\n    value: function new_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusdata_new_bytes(ptr0, len0);\n      return PlutusData.__wrap(ret);\n    }\n  }]);\n\n  return PlutusData;\n}();\n/**\n*/\n\nexport var PlutusList = /*#__PURE__*/function () {\n  function PlutusList() {\n    _classCallCheck(this, PlutusList);\n  }\n\n  _createClass(PlutusList, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutuslist_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusList}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.plutuslist_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.plutuslist_get(this.ptr, index);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, PlutusData);\n\n      wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusList.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutuslist_from_bytes(ptr0, len0);\n      return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.plutuslist_new();\n      return PlutusList.__wrap(ret);\n    }\n  }]);\n\n  return PlutusList;\n}();\n/**\n*/\n\nexport var PlutusMap = /*#__PURE__*/function () {\n  function PlutusMap() {\n    _classCallCheck(this, PlutusMap);\n  }\n\n  _createClass(PlutusMap, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusmap_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusMap}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.plutusmap_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {PlutusData} key\n    * @param {PlutusData} value\n    * @returns {PlutusData | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, PlutusData);\n\n      _assertClass(value, PlutusData);\n\n      var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} key\n    * @returns {PlutusData | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, PlutusData);\n\n      var ret = wasm.plutusmap_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.plutusmap_keys(this.ptr);\n      return PlutusList.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusMap.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusmap_from_bytes(ptr0, len0);\n      return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.plutusmap_new();\n      return PlutusMap.__wrap(ret);\n    }\n  }]);\n\n  return PlutusMap;\n}();\n/**\n*/\n\nexport var PlutusScript = /*#__PURE__*/function () {\n  function PlutusScript() {\n    _classCallCheck(this, PlutusScript);\n  }\n\n  _createClass(PlutusScript, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusscript_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n\n  }, {\n    key: \"hash\",\n    value:\n    /**\n    * @param {number} namespace\n    * @returns {ScriptHash}\n    */\n    function hash(namespace) {\n      var ret = wasm.plutusscript_hash(this.ptr, namespace);\n      return ScriptHash.__wrap(ret);\n    }\n    /**\n    *\n    *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n    *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n    *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n    *\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n\n  }, {\n    key: \"bytes\",\n    value:\n    /**\n    *\n    *     * The raw bytes of this compiled Plutus script.\n    *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n    *\n    * @returns {Uint8Array}\n    */\n    function bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusscript_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusScript.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusscript_from_bytes(ptr0, len0);\n      return PlutusScript.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusscript_new(ptr0, len0);\n      return PlutusScript.__wrap(ret);\n    }\n  }]);\n\n  return PlutusScript;\n}();\n/**\n*/\n\nexport var PlutusScripts = /*#__PURE__*/function () {\n  function PlutusScripts() {\n    _classCallCheck(this, PlutusScripts);\n  }\n\n  _createClass(PlutusScripts, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.plutusscripts_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScripts}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.plutusscripts_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusScript}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.plutusscripts_get(this.ptr, index);\n      return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, PlutusScript);\n\n      wasm.plutusscripts_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusScripts.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\n      return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScripts}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.plutusscripts_new();\n      return PlutusScripts.__wrap(ret);\n    }\n  }]);\n\n  return PlutusScripts;\n}();\n/**\n*/\n\nexport var PlutusWitness = /*#__PURE__*/function () {\n  function PlutusWitness() {\n    _classCallCheck(this, PlutusWitness);\n  }\n\n  _createClass(PlutusWitness, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n    * @param {PlutusData} redeemer\n    * @param {PlutusData | undefined} plutus_data\n    * @param {PlutusScript | undefined} script\n    * @returns {PlutusWitness}\n    */\n\n  }, {\n    key: \"plutus_data\",\n    value:\n    /**\n    * @returns {PlutusData | undefined}\n    */\n    function plutus_data() {\n      var ret = wasm.plutuswitness_plutus_data(this.ptr);\n      return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"redeemer\",\n    value: function redeemer() {\n      var ret = wasm.plutuswitness_redeemer(this.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScript | undefined}\n    */\n\n  }, {\n    key: \"script\",\n    value: function script() {\n      var ret = wasm.plutuswitness_script(this.ptr);\n      return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PlutusWitness.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(redeemer, plutus_data, script) {\n      _assertClass(redeemer, PlutusData);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(plutus_data)) {\n        _assertClass(plutus_data, PlutusData);\n\n        ptr0 = plutus_data.ptr;\n        plutus_data.ptr = 0;\n      }\n\n      var ptr1 = 0;\n\n      if (!isLikeNone(script)) {\n        _assertClass(script, PlutusScript);\n\n        ptr1 = script.ptr;\n        script.ptr = 0;\n      }\n\n      var ret = wasm.plutuswitness_new(redeemer.ptr, ptr0, ptr1);\n      return PlutusWitness.__wrap(ret);\n    }\n  }]);\n\n  return PlutusWitness;\n}();\n/**\n*/\n\nexport var Pointer = /*#__PURE__*/function () {\n  function Pointer() {\n    _classCallCheck(this, Pointer);\n  }\n\n  _createClass(Pointer, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n    * @param {BigNum} slot\n    * @param {BigNum} tx_index\n    * @param {BigNum} cert_index\n    * @returns {Pointer}\n    */\n\n  }, {\n    key: \"slot\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function slot() {\n      var ret = wasm.pointer_slot(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"tx_index\",\n    value: function tx_index() {\n      var ret = wasm.pointer_tx_index(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"cert_index\",\n    value: function cert_index() {\n      var ret = wasm.pointer_cert_index(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Pointer.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(slot, tx_index, cert_index) {\n      _assertClass(slot, BigNum);\n\n      _assertClass(tx_index, BigNum);\n\n      _assertClass(cert_index, BigNum);\n\n      var ret = wasm.pointer_new(slot.ptr, tx_index.ptr, cert_index.ptr);\n      return Pointer.__wrap(ret);\n    }\n  }]);\n\n  return Pointer;\n}();\n/**\n*/\n\nexport var PointerAddress = /*#__PURE__*/function () {\n  function PointerAddress() {\n    _classCallCheck(this, PointerAddress);\n  }\n\n  _createClass(PointerAddress, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {Pointer} stake\n    * @returns {PointerAddress}\n    */\n\n  }, {\n    key: \"payment_cred\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function payment_cred() {\n      var ret = wasm.pointeraddress_payment_cred(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Pointer}\n    */\n\n  }, {\n    key: \"stake_pointer\",\n    value: function stake_pointer() {\n      var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n      return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_address\",\n    value: function to_address() {\n      var ret = wasm.pointeraddress_to_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {PointerAddress | undefined}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PointerAddress.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(network, payment, stake) {\n      _assertClass(payment, StakeCredential);\n\n      _assertClass(stake, Pointer);\n\n      var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n      return PointerAddress.__wrap(ret);\n    }\n  }, {\n    key: \"from_address\",\n    value: function from_address(addr) {\n      _assertClass(addr, Address);\n\n      var ret = wasm.pointeraddress_from_address(addr.ptr);\n      return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n  }]);\n\n  return PointerAddress;\n}();\n/**\n*/\n\nexport var PoolMetadata = /*#__PURE__*/function () {\n  function PoolMetadata() {\n    _classCallCheck(this, PoolMetadata);\n  }\n\n  _createClass(PoolMetadata, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolmetadata_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadata}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolmetadata_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.poolmetadata_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolMetadata}\n    */\n\n  }, {\n    key: \"url\",\n    value:\n    /**\n    * @returns {URL}\n    */\n    function url() {\n      var ret = wasm.poolmetadata_url(this.ptr);\n      return URL.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadataHash}\n    */\n\n  }, {\n    key: \"pool_metadata_hash\",\n    value: function pool_metadata_hash() {\n      var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n      return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {URL} url\n    * @param {PoolMetadataHash} pool_metadata_hash\n    * @returns {PoolMetadata}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PoolMetadata.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n      return PoolMetadata.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolmetadata_from_json(ptr0, len0);\n      return PoolMetadata.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(url, pool_metadata_hash) {\n      _assertClass(url, URL);\n\n      _assertClass(pool_metadata_hash, PoolMetadataHash);\n\n      var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n      return PoolMetadata.__wrap(ret);\n    }\n  }]);\n\n  return PoolMetadata;\n}();\n/**\n*/\n\nexport var PoolMetadataHash = /*#__PURE__*/function () {\n  function PoolMetadataHash() {\n    _classCallCheck(this, PoolMetadataHash);\n  }\n\n  _createClass(PoolMetadataHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadataHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolmetadatahash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {PoolMetadataHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolmetadatahash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {PoolMetadataHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PoolMetadataHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\n      return PoolMetadataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\n      return PoolMetadataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolmetadatahash_from_hex(ptr0, len0);\n      return PoolMetadataHash.__wrap(ret);\n    }\n  }]);\n\n  return PoolMetadataHash;\n}();\n/**\n*/\n\nexport var PoolParams = /*#__PURE__*/function () {\n  function PoolParams() {\n    _classCallCheck(this, PoolParams);\n  }\n\n  _createClass(PoolParams, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolparams_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolParams}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolparams_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.poolparams_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolParams}\n    */\n\n  }, {\n    key: \"operator\",\n    value:\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    function operator() {\n      var ret = wasm.poolparams_operator(this.ptr);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n\n  }, {\n    key: \"vrf_keyhash\",\n    value: function vrf_keyhash() {\n      var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n      return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"pledge\",\n    value: function pledge() {\n      var ret = wasm.poolparams_pledge(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"cost\",\n    value: function cost() {\n      var ret = wasm.poolparams_cost(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n\n  }, {\n    key: \"margin\",\n    value: function margin() {\n      var ret = wasm.poolparams_margin(this.ptr);\n      return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress}\n    */\n\n  }, {\n    key: \"reward_account\",\n    value: function reward_account() {\n      var ret = wasm.poolparams_reward_account(this.ptr);\n      return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n\n  }, {\n    key: \"pool_owners\",\n    value: function pool_owners() {\n      var ret = wasm.poolparams_pool_owners(this.ptr);\n      return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n\n  }, {\n    key: \"relays\",\n    value: function relays() {\n      var ret = wasm.poolparams_relays(this.ptr);\n      return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadata | undefined}\n    */\n\n  }, {\n    key: \"pool_metadata\",\n    value: function pool_metadata() {\n      var ret = wasm.poolparams_pool_metadata(this.ptr);\n      return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} operator\n    * @param {VRFKeyHash} vrf_keyhash\n    * @param {BigNum} pledge\n    * @param {BigNum} cost\n    * @param {UnitInterval} margin\n    * @param {RewardAddress} reward_account\n    * @param {Ed25519KeyHashes} pool_owners\n    * @param {Relays} relays\n    * @param {PoolMetadata | undefined} pool_metadata\n    * @returns {PoolParams}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PoolParams.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolparams_from_bytes(ptr0, len0);\n      return PoolParams.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolparams_from_json(ptr0, len0);\n      return PoolParams.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n      _assertClass(operator, Ed25519KeyHash);\n\n      _assertClass(vrf_keyhash, VRFKeyHash);\n\n      _assertClass(pledge, BigNum);\n\n      _assertClass(cost, BigNum);\n\n      _assertClass(margin, UnitInterval);\n\n      _assertClass(reward_account, RewardAddress);\n\n      _assertClass(pool_owners, Ed25519KeyHashes);\n\n      _assertClass(relays, Relays);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(pool_metadata)) {\n        _assertClass(pool_metadata, PoolMetadata);\n\n        ptr0 = pool_metadata.ptr;\n        pool_metadata.ptr = 0;\n      }\n\n      var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n      return PoolParams.__wrap(ret);\n    }\n  }]);\n\n  return PoolParams;\n}();\n/**\n*/\n\nexport var PoolRegistration = /*#__PURE__*/function () {\n  function PoolRegistration() {\n    _classCallCheck(this, PoolRegistration);\n  }\n\n  _createClass(PoolRegistration, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolregistration_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRegistration}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolregistration_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.poolregistration_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolRegistration}\n    */\n\n  }, {\n    key: \"pool_params\",\n    value:\n    /**\n    * @returns {PoolParams}\n    */\n    function pool_params() {\n      var ret = wasm.poolregistration_pool_params(this.ptr);\n      return PoolParams.__wrap(ret);\n    }\n    /**\n    * @param {PoolParams} pool_params\n    * @returns {PoolRegistration}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PoolRegistration.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n      return PoolRegistration.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolregistration_from_json(ptr0, len0);\n      return PoolRegistration.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(pool_params) {\n      _assertClass(pool_params, PoolParams);\n\n      var ret = wasm.poolregistration_new(pool_params.ptr);\n      return PoolRegistration.__wrap(ret);\n    }\n  }]);\n\n  return PoolRegistration;\n}();\n/**\n*/\n\nexport var PoolRetirement = /*#__PURE__*/function () {\n  function PoolRetirement() {\n    _classCallCheck(this, PoolRetirement);\n  }\n\n  _createClass(PoolRetirement, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolretirement_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRetirement}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.poolretirement_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.poolretirement_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolRetirement}\n    */\n\n  }, {\n    key: \"pool_keyhash\",\n    value:\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    function pool_keyhash() {\n      var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"epoch\",\n    value: function epoch() {\n      var ret = wasm.poolretirement_epoch(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @param {number} epoch\n    * @returns {PoolRetirement}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PoolRetirement.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n      return PoolRetirement.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.poolretirement_from_json(ptr0, len0);\n      return PoolRetirement.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(pool_keyhash, epoch) {\n      _assertClass(pool_keyhash, Ed25519KeyHash);\n\n      var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n      return PoolRetirement.__wrap(ret);\n    }\n  }]);\n\n  return PoolRetirement;\n}();\n/**\n*/\n\nexport var PrivateKey = /*#__PURE__*/function () {\n  function PrivateKey() {\n    _classCallCheck(this, PrivateKey);\n  }\n\n  _createClass(PrivateKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n\n  }, {\n    key: \"to_public\",\n    value: function to_public() {\n      var ret = wasm.privatekey_to_public(this.ptr);\n      return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_bech32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.privatekey_to_bech32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value: function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.privatekey_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n\n  }, {\n    key: \"sign\",\n    value:\n    /**\n    * @param {Uint8Array} message\n    * @returns {Ed25519Signature}\n    */\n    function sign(message) {\n      var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n      return Ed25519Signature.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PrivateKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"generate_ed25519\",\n    value: function generate_ed25519() {\n      var ret = wasm.privatekey_generate_ed25519();\n      return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n\n  }, {\n    key: \"generate_ed25519extended\",\n    value: function generate_ed25519extended() {\n      var ret = wasm.privatekey_generate_ed25519extended();\n      return PrivateKey.__wrap(ret);\n    }\n    /**\n    * Get private key from its bech32 representation\n    * ```javascript\n    * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n    * ```\n    * For an extended 25519 key\n    * ```javascript\n    * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PrivateKey}\n    */\n\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech32_str) {\n      var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.privatekey_from_bech32(ptr0, len0);\n      return PrivateKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_extended_bytes\",\n    value: function from_extended_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n      return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n\n  }, {\n    key: \"from_normal_bytes\",\n    value: function from_normal_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n      return PrivateKey.__wrap(ret);\n    }\n  }]);\n\n  return PrivateKey;\n}();\n/**\n*/\n\nexport var ProposedProtocolParameterUpdates = /*#__PURE__*/function () {\n  function ProposedProtocolParameterUpdates() {\n    _classCallCheck(this, ProposedProtocolParameterUpdates);\n  }\n\n  _createClass(ProposedProtocolParameterUpdates, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.proposedprotocolparameterupdates_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.proposedprotocolparameterupdates_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {GenesisHash} key\n    * @param {ProtocolParamUpdate} value\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, GenesisHash);\n\n      _assertClass(value, ProtocolParamUpdate);\n\n      var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} key\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, GenesisHash);\n\n      var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n      return GenesisHashes.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n      return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.proposedprotocolparameterupdates_from_json(ptr0, len0);\n      return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.proposedprotocolparameterupdates_new();\n      return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n  }]);\n\n  return ProposedProtocolParameterUpdates;\n}();\n/**\n*/\n\nexport var ProtocolParamUpdate = /*#__PURE__*/function () {\n  function ProtocolParamUpdate() {\n    _classCallCheck(this, ProtocolParamUpdate);\n  }\n\n  _createClass(ProtocolParamUpdate, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolParamUpdate}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.protocolparamupdate_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ProtocolParamUpdate}\n    */\n\n  }, {\n    key: \"set_minfee_a\",\n    value:\n    /**\n    * @param {BigNum} minfee_a\n    */\n    function set_minfee_a(minfee_a) {\n      _assertClass(minfee_a, BigNum);\n\n      wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"minfee_a\",\n    value: function minfee_a() {\n      var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_b\n    */\n\n  }, {\n    key: \"set_minfee_b\",\n    value: function set_minfee_b(minfee_b) {\n      _assertClass(minfee_b, BigNum);\n\n      wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"minfee_b\",\n    value: function minfee_b() {\n      var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_block_body_size\n    */\n\n  }, {\n    key: \"set_max_block_body_size\",\n    value: function set_max_block_body_size(max_block_body_size) {\n      wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_block_body_size\",\n    value: function max_block_body_size() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {number} max_tx_size\n    */\n\n  }, {\n    key: \"set_max_tx_size\",\n    value: function set_max_tx_size(max_tx_size) {\n      wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_tx_size\",\n    value: function max_tx_size() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {number} max_block_header_size\n    */\n\n  }, {\n    key: \"set_max_block_header_size\",\n    value: function set_max_block_header_size(max_block_header_size) {\n      wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_block_header_size\",\n    value: function max_block_header_size() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {BigNum} key_deposit\n    */\n\n  }, {\n    key: \"set_key_deposit\",\n    value: function set_key_deposit(key_deposit) {\n      _assertClass(key_deposit, BigNum);\n\n      wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"key_deposit\",\n    value: function key_deposit() {\n      var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    */\n\n  }, {\n    key: \"set_pool_deposit\",\n    value: function set_pool_deposit(pool_deposit) {\n      _assertClass(pool_deposit, BigNum);\n\n      wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"pool_deposit\",\n    value: function pool_deposit() {\n      var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_epoch\n    */\n\n  }, {\n    key: \"set_max_epoch\",\n    value: function set_max_epoch(max_epoch) {\n      wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_epoch\",\n    value: function max_epoch() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {number} n_opt\n    */\n\n  }, {\n    key: \"set_n_opt\",\n    value: function set_n_opt(n_opt) {\n      wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"n_opt\",\n    value: function n_opt() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {UnitInterval} pool_pledge_influence\n    */\n\n  }, {\n    key: \"set_pool_pledge_influence\",\n    value: function set_pool_pledge_influence(pool_pledge_influence) {\n      _assertClass(pool_pledge_influence, UnitInterval);\n\n      wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n\n  }, {\n    key: \"pool_pledge_influence\",\n    value: function pool_pledge_influence() {\n      var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n      return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} expansion_rate\n    */\n\n  }, {\n    key: \"set_expansion_rate\",\n    value: function set_expansion_rate(expansion_rate) {\n      _assertClass(expansion_rate, UnitInterval);\n\n      wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n\n  }, {\n    key: \"expansion_rate\",\n    value: function expansion_rate() {\n      var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n      return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} treasury_growth_rate\n    */\n\n  }, {\n    key: \"set_treasury_growth_rate\",\n    value: function set_treasury_growth_rate(treasury_growth_rate) {\n      _assertClass(treasury_growth_rate, UnitInterval);\n\n      wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n\n  }, {\n    key: \"treasury_growth_rate\",\n    value: function treasury_growth_rate() {\n      var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n      return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} d\n    */\n\n  }, {\n    key: \"set_d\",\n    value: function set_d(d) {\n      _assertClass(d, UnitInterval);\n\n      wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n\n  }, {\n    key: \"d\",\n    value: function d() {\n      var ret = wasm.protocolparamupdate_d(this.ptr);\n      return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {Nonce} extra_entropy\n    */\n\n  }, {\n    key: \"set_extra_entropy\",\n    value: function set_extra_entropy(extra_entropy) {\n      _assertClass(extra_entropy, Nonce);\n\n      wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n    * @returns {Nonce | undefined}\n    */\n\n  }, {\n    key: \"extra_entropy\",\n    value: function extra_entropy() {\n      var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n      return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersion} protocol_version\n    */\n\n  }, {\n    key: \"set_protocol_version\",\n    value: function set_protocol_version(protocol_version) {\n      _assertClass(protocol_version, ProtocolVersion);\n\n      wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n    * @returns {ProtocolVersion | undefined}\n    */\n\n  }, {\n    key: \"protocol_version\",\n    value: function protocol_version() {\n      var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n      return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} min_pool_cost\n    */\n\n  }, {\n    key: \"set_min_pool_cost\",\n    value: function set_min_pool_cost(min_pool_cost) {\n      _assertClass(min_pool_cost, BigNum);\n\n      wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"min_pool_cost\",\n    value: function min_pool_cost() {\n      var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ada_per_utxo_byte\n    */\n\n  }, {\n    key: \"set_ada_per_utxo_byte\",\n    value: function set_ada_per_utxo_byte(ada_per_utxo_byte) {\n      _assertClass(ada_per_utxo_byte, BigNum);\n\n      wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"ada_per_utxo_byte\",\n    value: function ada_per_utxo_byte() {\n      var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Costmdls} cost_models\n    */\n\n  }, {\n    key: \"set_cost_models\",\n    value: function set_cost_models(cost_models) {\n      _assertClass(cost_models, Costmdls);\n\n      wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n    * @returns {Costmdls | undefined}\n    */\n\n  }, {\n    key: \"cost_models\",\n    value: function cost_models() {\n      var ret = wasm.protocolparamupdate_cost_models(this.ptr);\n      return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} execution_costs\n    */\n\n  }, {\n    key: \"set_execution_costs\",\n    value: function set_execution_costs(execution_costs) {\n      _assertClass(execution_costs, ExUnitPrices);\n\n      wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n    * @returns {ExUnitPrices | undefined}\n    */\n\n  }, {\n    key: \"execution_costs\",\n    value: function execution_costs() {\n      var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n      return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_tx_ex_units\n    */\n\n  }, {\n    key: \"set_max_tx_ex_units\",\n    value: function set_max_tx_ex_units(max_tx_ex_units) {\n      _assertClass(max_tx_ex_units, ExUnits);\n\n      wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n\n  }, {\n    key: \"max_tx_ex_units\",\n    value: function max_tx_ex_units() {\n      var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n      return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_block_ex_units\n    */\n\n  }, {\n    key: \"set_max_block_ex_units\",\n    value: function set_max_block_ex_units(max_block_ex_units) {\n      _assertClass(max_block_ex_units, ExUnits);\n\n      wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n\n  }, {\n    key: \"max_block_ex_units\",\n    value: function max_block_ex_units() {\n      var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n      return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    */\n\n  }, {\n    key: \"set_max_value_size\",\n    value: function set_max_value_size(max_value_size) {\n      wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_value_size\",\n    value: function max_value_size() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {number} collateral_percentage\n    */\n\n  }, {\n    key: \"set_collateral_percentage\",\n    value: function set_collateral_percentage(collateral_percentage) {\n      wasm.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"collateral_percentage\",\n    value: function collateral_percentage() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {number} max_collateral_inputs\n    */\n\n  }, {\n    key: \"set_max_collateral_inputs\",\n    value: function set_max_collateral_inputs(max_collateral_inputs) {\n      wasm.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"max_collateral_inputs\",\n    value: function max_collateral_inputs() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {ProtocolParamUpdate}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ProtocolParamUpdate.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n      return ProtocolParamUpdate.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.protocolparamupdate_from_json(ptr0, len0);\n      return ProtocolParamUpdate.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.protocolparamupdate_new();\n      return ProtocolParamUpdate.__wrap(ret);\n    }\n  }]);\n\n  return ProtocolParamUpdate;\n}();\n/**\n*/\n\nexport var ProtocolVersion = /*#__PURE__*/function () {\n  function ProtocolVersion() {\n    _classCallCheck(this, ProtocolVersion);\n  }\n\n  _createClass(ProtocolVersion, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolversion_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersion}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.protocolversion_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.protocolversion_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ProtocolVersion}\n    */\n\n  }, {\n    key: \"major\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function major() {\n      var ret = wasm.protocolversion_major(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"minor\",\n    value: function minor() {\n      var ret = wasm.protocolversion_minor(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} major\n    * @param {number} minor\n    * @returns {ProtocolVersion}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ProtocolVersion.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n      return ProtocolVersion.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.protocolversion_from_json(ptr0, len0);\n      return ProtocolVersion.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(major, minor) {\n      var ret = wasm.protocolversion_new(major, minor);\n      return ProtocolVersion.__wrap(ret);\n    }\n  }]);\n\n  return ProtocolVersion;\n}();\n/**\n* ED25519 key used as public key\n*/\n\nexport var PublicKey = /*#__PURE__*/function () {\n  function PublicKey() {\n    _classCallCheck(this, PublicKey);\n  }\n\n  _createClass(PublicKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n    * Get public key from its bech32 representation\n    * Example:\n    * ```javascript\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PublicKey}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_bech32() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.publickey_to_bech32(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value: function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.publickey_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PublicKey}\n    */\n\n  }, {\n    key: \"verify\",\n    value:\n    /**\n    * @param {Uint8Array} data\n    * @param {Ed25519Signature} signature\n    * @returns {boolean}\n    */\n    function verify(data, signature) {\n      var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n\n      _assertClass(signature, Ed25519Signature);\n\n      var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      var ret = wasm.publickey_hash(this.ptr);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PublicKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech32_str) {\n      var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.publickey_from_bech32(ptr0, len0);\n      return PublicKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.publickey_from_bytes(ptr0, len0);\n      return PublicKey.__wrap(ret);\n    }\n  }]);\n\n  return PublicKey;\n}();\n/**\n*/\n\nexport var PublicKeys = /*#__PURE__*/function () {\n  /**\n  */\n  function PublicKeys() {\n    _classCallCheck(this, PublicKeys);\n\n    var ret = wasm.publickeys_new();\n    return PublicKeys.__wrap(ret);\n  }\n  /**\n  * @returns {number}\n  */\n\n\n  _createClass(PublicKeys, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_publickeys_free(ptr);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var ret = wasm.publickeys_size(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PublicKey}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.publickeys_get(this.ptr, index);\n      return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} key\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(key) {\n      _assertClass(key, PublicKey);\n\n      wasm.publickeys_add(this.ptr, key.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PublicKeys.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return PublicKeys;\n}();\n/**\n*/\n\nexport var Redeemer = /*#__PURE__*/function () {\n  function Redeemer() {\n    _classCallCheck(this, Redeemer);\n  }\n\n  _createClass(Redeemer, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.redeemer_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemer}\n    */\n\n  }, {\n    key: \"tag\",\n    value:\n    /**\n    * @returns {RedeemerTag}\n    */\n    function tag() {\n      var ret = wasm.redeemer_tag(this.ptr);\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"index\",\n    value: function index() {\n      var ret = wasm.redeemer_index(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n\n  }, {\n    key: \"data\",\n    value: function data() {\n      var ret = wasm.redeemer_data(this.ptr);\n      return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {ExUnits}\n    */\n\n  }, {\n    key: \"ex_units\",\n    value: function ex_units() {\n      var ret = wasm.redeemer_ex_units(this.ptr);\n      return ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {RedeemerTag} tag\n    * @param {BigNum} index\n    * @param {PlutusData} data\n    * @param {ExUnits} ex_units\n    * @returns {Redeemer}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Redeemer.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.redeemer_from_bytes(ptr0, len0);\n      return Redeemer.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(tag, index, data, ex_units) {\n      _assertClass(tag, RedeemerTag);\n\n      _assertClass(index, BigNum);\n\n      _assertClass(data, PlutusData);\n\n      _assertClass(ex_units, ExUnits);\n\n      var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n      return Redeemer.__wrap(ret);\n    }\n  }]);\n\n  return Redeemer;\n}();\n/**\n*/\n\nexport var RedeemerTag = /*#__PURE__*/function () {\n  function RedeemerTag() {\n    _classCallCheck(this, RedeemerTag);\n  }\n\n  _createClass(RedeemerTag, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.redeemertag_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.redeemertag_kind(this.ptr);\n      return ret >>> 0;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(RedeemerTag.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.redeemertag_from_bytes(ptr0, len0);\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"new_spend\",\n    value: function new_spend() {\n      var ret = wasm.redeemertag_new_spend();\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"new_mint\",\n    value: function new_mint() {\n      var ret = wasm.redeemertag_new_mint();\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"new_cert\",\n    value: function new_cert() {\n      var ret = wasm.redeemertag_new_cert();\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"new_reward\",\n    value: function new_reward() {\n      var ret = wasm.redeemertag_new_reward();\n      return RedeemerTag.__wrap(ret);\n    }\n  }]);\n\n  return RedeemerTag;\n}();\n/**\n*/\n\nexport var RedeemerWitnessKey = /*#__PURE__*/function () {\n  function RedeemerWitnessKey() {\n    _classCallCheck(this, RedeemerWitnessKey);\n  }\n\n  _createClass(RedeemerWitnessKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_redeemerwitnesskey_free(ptr);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n\n  }, {\n    key: \"tag\",\n    value: function tag() {\n      var ret = wasm.redeemerwitnesskey_tag(this.ptr);\n      return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"index\",\n    value: function index() {\n      var ret = wasm.redeemerwitnesskey_index(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RedeemerTag} tag\n    * @param {BigNum} index\n    * @returns {RedeemerWitnessKey}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(RedeemerWitnessKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(tag, index) {\n      _assertClass(tag, RedeemerTag);\n\n      _assertClass(index, BigNum);\n\n      var ret = wasm.redeemerwitnesskey_new(tag.ptr, index.ptr);\n      return RedeemerWitnessKey.__wrap(ret);\n    }\n  }]);\n\n  return RedeemerWitnessKey;\n}();\n/**\n*/\n\nexport var Redeemers = /*#__PURE__*/function () {\n  function Redeemers() {\n    _classCallCheck(this, Redeemers);\n  }\n\n  _createClass(Redeemers, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.redeemers_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemers}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.redeemers_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Redeemer}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.redeemers_get(this.ptr, index);\n      return Redeemer.__wrap(ret);\n    }\n    /**\n    * @param {Redeemer} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Redeemer);\n\n      wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Redeemers.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.redeemers_from_bytes(ptr0, len0);\n      return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemers}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.redeemers_new();\n      return Redeemers.__wrap(ret);\n    }\n  }]);\n\n  return Redeemers;\n}();\n/**\n*/\n\nexport var Relay = /*#__PURE__*/function () {\n  function Relay() {\n    _classCallCheck(this, Relay);\n  }\n\n  _createClass(Relay, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_relay_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.relay_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.relay_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.relay_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.relay_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {SingleHostAddr | undefined}\n    */\n\n  }, {\n    key: \"as_single_host_addr\",\n    value: function as_single_host_addr() {\n      var ret = wasm.relay_as_single_host_addr(this.ptr);\n      return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {SingleHostName | undefined}\n    */\n\n  }, {\n    key: \"as_single_host_name\",\n    value: function as_single_host_name() {\n      var ret = wasm.relay_as_single_host_name(this.ptr);\n      return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {MultiHostName | undefined}\n    */\n\n  }, {\n    key: \"as_multi_host_name\",\n    value: function as_multi_host_name() {\n      var ret = wasm.relay_as_multi_host_name(this.ptr);\n      return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Relay.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.relay_from_bytes(ptr0, len0);\n      return Relay.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.relay_from_json(ptr0, len0);\n      return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostAddr} single_host_addr\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"new_single_host_addr\",\n    value: function new_single_host_addr(single_host_addr) {\n      _assertClass(single_host_addr, SingleHostAddr);\n\n      var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n      return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostName} single_host_name\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"new_single_host_name\",\n    value: function new_single_host_name(single_host_name) {\n      _assertClass(single_host_name, SingleHostName);\n\n      var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n      return Relay.__wrap(ret);\n    }\n    /**\n    * @param {MultiHostName} multi_host_name\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"new_multi_host_name\",\n    value: function new_multi_host_name(multi_host_name) {\n      _assertClass(multi_host_name, MultiHostName);\n\n      var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n      return Relay.__wrap(ret);\n    }\n  }]);\n\n  return Relay;\n}();\n/**\n*/\n\nexport var Relays = /*#__PURE__*/function () {\n  function Relays() {\n    _classCallCheck(this, Relays);\n  }\n\n  _createClass(Relays, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_relays_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.relays_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relays}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.relays_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.relays_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Relays}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.relays_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Relay}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.relays_get(this.ptr, index);\n      return Relay.__wrap(ret);\n    }\n    /**\n    * @param {Relay} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Relay);\n\n      wasm.relays_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Relays.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.relays_from_bytes(ptr0, len0);\n      return Relays.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.relays_from_json(ptr0, len0);\n      return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.relays_new();\n      return Relays.__wrap(ret);\n    }\n  }]);\n\n  return Relays;\n}();\n/**\n*/\n\nexport var RequiredWitnessSet = /*#__PURE__*/function () {\n  function RequiredWitnessSet() {\n    _classCallCheck(this, RequiredWitnessSet);\n  }\n\n  _createClass(RequiredWitnessSet, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_requiredwitnessset_free(ptr);\n    }\n    /**\n    * @param {Vkeywitness} vkey\n    */\n\n  }, {\n    key: \"add_vkey\",\n    value: function add_vkey(vkey) {\n      _assertClass(vkey, Vkeywitness);\n\n      wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n    * @param {Vkey} vkey\n    */\n\n  }, {\n    key: \"add_vkey_key\",\n    value: function add_vkey_key(vkey) {\n      _assertClass(vkey, Vkey);\n\n      wasm.requiredwitnessset_add_vkey_key(this.ptr, vkey.ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    */\n\n  }, {\n    key: \"add_vkey_key_hash\",\n    value: function add_vkey_key_hash(hash) {\n      _assertClass(hash, Ed25519KeyHash);\n\n      wasm.requiredwitnessset_add_vkey_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n    * @param {BootstrapWitness} bootstrap\n    */\n\n  }, {\n    key: \"add_bootstrap\",\n    value: function add_bootstrap(bootstrap) {\n      _assertClass(bootstrap, BootstrapWitness);\n\n      wasm.requiredwitnessset_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n    * @param {Vkey} bootstrap\n    */\n\n  }, {\n    key: \"add_bootstrap_key\",\n    value: function add_bootstrap_key(bootstrap) {\n      _assertClass(bootstrap, Vkey);\n\n      wasm.requiredwitnessset_add_bootstrap_key(this.ptr, bootstrap.ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    */\n\n  }, {\n    key: \"add_bootstrap_key_hash\",\n    value: function add_bootstrap_key_hash(hash) {\n      _assertClass(hash, Ed25519KeyHash);\n\n      wasm.requiredwitnessset_add_bootstrap_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n    * @param {NativeScript} native_script\n    */\n\n  }, {\n    key: \"add_native_script\",\n    value: function add_native_script(native_script) {\n      _assertClass(native_script, NativeScript);\n\n      wasm.requiredwitnessset_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n    * @param {ScriptHash} native_script\n    */\n\n  }, {\n    key: \"add_native_script_hash\",\n    value: function add_native_script_hash(native_script) {\n      _assertClass(native_script, ScriptHash);\n\n      wasm.requiredwitnessset_add_native_script_hash(this.ptr, native_script.ptr);\n    }\n    /**\n    * @param {PlutusScript} plutus_script\n    */\n\n  }, {\n    key: \"add_plutus_script\",\n    value: function add_plutus_script(plutus_script) {\n      _assertClass(plutus_script, PlutusScript);\n\n      wasm.requiredwitnessset_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n    * @param {ScriptHash} plutus_script\n    */\n\n  }, {\n    key: \"add_plutus_hash\",\n    value: function add_plutus_hash(plutus_script) {\n      _assertClass(plutus_script, ScriptHash);\n\n      wasm.requiredwitnessset_add_plutus_hash(this.ptr, plutus_script.ptr);\n    }\n    /**\n    * @param {PlutusData} plutus_datum\n    */\n\n  }, {\n    key: \"add_plutus_datum\",\n    value: function add_plutus_datum(plutus_datum) {\n      _assertClass(plutus_datum, PlutusData);\n\n      wasm.requiredwitnessset_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n    * @param {DataHash} plutus_datum\n    */\n\n  }, {\n    key: \"add_plutus_datum_hash\",\n    value: function add_plutus_datum_hash(plutus_datum) {\n      _assertClass(plutus_datum, DataHash);\n\n      wasm.requiredwitnessset_add_plutus_datum_hash(this.ptr, plutus_datum.ptr);\n    }\n    /**\n    * @param {Redeemer} redeemer\n    */\n\n  }, {\n    key: \"add_redeemer\",\n    value: function add_redeemer(redeemer) {\n      _assertClass(redeemer, Redeemer);\n\n      wasm.requiredwitnessset_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n    * @param {RedeemerWitnessKey} redeemer\n    */\n\n  }, {\n    key: \"add_redeemer_tag\",\n    value: function add_redeemer_tag(redeemer) {\n      _assertClass(redeemer, RedeemerWitnessKey);\n\n      wasm.requiredwitnessset_add_redeemer_tag(this.ptr, redeemer.ptr);\n    }\n    /**\n    * @param {RequiredWitnessSet} requirements\n    */\n\n  }, {\n    key: \"add_all\",\n    value: function add_all(requirements) {\n      _assertClass(requirements, RequiredWitnessSet);\n\n      wasm.requiredwitnessset_add_all(this.ptr, requirements.ptr);\n    }\n    /**\n    * @returns {RequiredWitnessSet}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(RequiredWitnessSet.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.requiredwitnessset_new();\n      return RequiredWitnessSet.__wrap(ret);\n    }\n  }]);\n\n  return RequiredWitnessSet;\n}();\n/**\n*/\n\nexport var RewardAddress = /*#__PURE__*/function () {\n  function RewardAddress() {\n    _classCallCheck(this, RewardAddress);\n  }\n\n  _createClass(RewardAddress, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {RewardAddress}\n    */\n\n  }, {\n    key: \"payment_cred\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function payment_cred() {\n      var ret = wasm.rewardaddress_payment_cred(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n\n  }, {\n    key: \"to_address\",\n    value: function to_address() {\n      var ret = wasm.rewardaddress_to_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {RewardAddress | undefined}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(RewardAddress.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(network, payment) {\n      _assertClass(payment, StakeCredential);\n\n      var ret = wasm.rewardaddress_new(network, payment.ptr);\n      return RewardAddress.__wrap(ret);\n    }\n  }, {\n    key: \"from_address\",\n    value: function from_address(addr) {\n      _assertClass(addr, Address);\n\n      var ret = wasm.rewardaddress_from_address(addr.ptr);\n      return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n  }]);\n\n  return RewardAddress;\n}();\n/**\n*/\n\nexport var RewardAddresses = /*#__PURE__*/function () {\n  function RewardAddresses() {\n    _classCallCheck(this, RewardAddresses);\n  }\n\n  _createClass(RewardAddresses, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RewardAddresses}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.rewardaddresses_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.rewardaddresses_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {RewardAddresses}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.rewardaddresses_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {RewardAddress}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.rewardaddresses_get(this.ptr, index);\n      return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, RewardAddress);\n\n      wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(RewardAddresses.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n      return RewardAddresses.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.rewardaddresses_from_json(ptr0, len0);\n      return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.rewardaddresses_new();\n      return RewardAddresses.__wrap(ret);\n    }\n  }]);\n\n  return RewardAddresses;\n}();\n/**\n*/\n\nexport var Script = /*#__PURE__*/function () {\n  function Script() {\n    _classCallCheck(this, Script);\n  }\n\n  _createClass(Script, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_script_free(ptr);\n    }\n    /**\n    * @param {NativeScript} native_script\n    * @returns {Script}\n    */\n\n  }, {\n    key: \"new_native\",\n    value: function new_native(native_script) {\n      _assertClass(native_script, NativeScript);\n\n      var ret = wasm.script_new_native(this.ptr, native_script.ptr);\n      return Script.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} plutus_script\n    * @returns {Script}\n    */\n\n  }, {\n    key: \"new_plutus_v1\",\n    value: function new_plutus_v1(plutus_script) {\n      _assertClass(plutus_script, PlutusScript);\n\n      var ret = wasm.script_new_plutus_v1(this.ptr, plutus_script.ptr);\n      return Script.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} plutus_script\n    * @returns {Script}\n    */\n\n  }, {\n    key: \"new_plutus_v2\",\n    value: function new_plutus_v2(plutus_script) {\n      _assertClass(plutus_script, PlutusScript);\n\n      var ret = wasm.script_new_plutus_v2(this.ptr, plutus_script.ptr);\n      return Script.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"kind\",\n    value: function kind() {\n      var ret = wasm.script_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScript | undefined}\n    */\n\n  }, {\n    key: \"as_native\",\n    value: function as_native() {\n      var ret = wasm.script_as_native(this.ptr);\n      return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScript | undefined}\n    */\n\n  }, {\n    key: \"as_plutus_v1\",\n    value: function as_plutus_v1() {\n      var ret = wasm.script_as_plutus_v1(this.ptr);\n      return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScript | undefined}\n    */\n\n  }, {\n    key: \"as_plutus_v2\",\n    value: function as_plutus_v2() {\n      var ret = wasm.script_as_plutus_v2(this.ptr);\n      return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Script.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return Script;\n}();\n/**\n*/\n\nexport var ScriptAll = /*#__PURE__*/function () {\n  function ScriptAll() {\n    _classCallCheck(this, ScriptAll);\n  }\n\n  _createClass(ScriptAll, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptall_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAll}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptall_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scriptall_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptAll}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value:\n    /**\n    * @returns {NativeScripts}\n    */\n    function native_scripts() {\n      var ret = wasm.scriptall_native_scripts(this.ptr);\n      return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAll}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptAll.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptall_from_bytes(ptr0, len0);\n      return ScriptAll.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptall_from_json(ptr0, len0);\n      return ScriptAll.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(native_scripts) {\n      _assertClass(native_scripts, NativeScripts);\n\n      var ret = wasm.scriptall_new(native_scripts.ptr);\n      return ScriptAll.__wrap(ret);\n    }\n  }]);\n\n  return ScriptAll;\n}();\n/**\n*/\n\nexport var ScriptAny = /*#__PURE__*/function () {\n  function ScriptAny() {\n    _classCallCheck(this, ScriptAny);\n  }\n\n  _createClass(ScriptAny, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptany_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAny}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptany_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scriptany_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptAny}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value:\n    /**\n    * @returns {NativeScripts}\n    */\n    function native_scripts() {\n      var ret = wasm.scriptany_native_scripts(this.ptr);\n      return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAny}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptAny.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptany_from_bytes(ptr0, len0);\n      return ScriptAny.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptany_from_json(ptr0, len0);\n      return ScriptAny.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(native_scripts) {\n      _assertClass(native_scripts, NativeScripts);\n\n      var ret = wasm.scriptany_new(native_scripts.ptr);\n      return ScriptAny.__wrap(ret);\n    }\n  }]);\n\n  return ScriptAny;\n}();\n/**\n*/\n\nexport var ScriptDataHash = /*#__PURE__*/function () {\n  function ScriptDataHash() {\n    _classCallCheck(this, ScriptDataHash);\n  }\n\n  _createClass(ScriptDataHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptDataHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptdatahash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptDataHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptdatahash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {ScriptDataHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptDataHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\n      return ScriptDataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\n      return ScriptDataHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptdatahash_from_hex(ptr0, len0);\n      return ScriptDataHash.__wrap(ret);\n    }\n  }]);\n\n  return ScriptDataHash;\n}();\n/**\n*/\n\nexport var ScriptHash = /*#__PURE__*/function () {\n  function ScriptHash() {\n    _classCallCheck(this, ScriptHash);\n  }\n\n  _createClass(ScriptHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scripthash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scripthash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {ScriptHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scripthash_from_bytes(ptr0, len0);\n      return ScriptHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scripthash_from_bech32(ptr0, len0);\n      return ScriptHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scripthash_from_hex(ptr0, len0);\n      return ScriptHash.__wrap(ret);\n    }\n  }]);\n\n  return ScriptHash;\n}();\n/**\n*/\n\nexport var ScriptHashes = /*#__PURE__*/function () {\n  function ScriptHashes() {\n    _classCallCheck(this, ScriptHashes);\n  }\n\n  _createClass(ScriptHashes, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scripthashes_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHashes}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scripthashes_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scripthashes_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptHashes}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.scripthashes_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ScriptHash}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.scripthashes_get(this.ptr, index);\n      return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, ScriptHash);\n\n      wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptHashes.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n      return ScriptHashes.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scripthashes_from_json(ptr0, len0);\n      return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.scripthashes_new();\n      return ScriptHashes.__wrap(ret);\n    }\n  }]);\n\n  return ScriptHashes;\n}();\n/**\n*/\n\nexport var ScriptNOfK = /*#__PURE__*/function () {\n  function ScriptNOfK() {\n    _classCallCheck(this, ScriptNOfK);\n  }\n\n  _createClass(ScriptNOfK, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptnofk_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptNOfK}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptnofk_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scriptnofk_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptNOfK}\n    */\n\n  }, {\n    key: \"n\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function n() {\n      var ret = wasm.scriptnofk_n(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value: function native_scripts() {\n      var ret = wasm.scriptnofk_native_scripts(this.ptr);\n      return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {number} n\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptNOfK}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptNOfK.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n      return ScriptNOfK.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptnofk_from_json(ptr0, len0);\n      return ScriptNOfK.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(n, native_scripts) {\n      _assertClass(native_scripts, NativeScripts);\n\n      var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n      return ScriptNOfK.__wrap(ret);\n    }\n  }]);\n\n  return ScriptNOfK;\n}();\n/**\n*/\n\nexport var ScriptPubkey = /*#__PURE__*/function () {\n  function ScriptPubkey() {\n    _classCallCheck(this, ScriptPubkey);\n  }\n\n  _createClass(ScriptPubkey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptPubkey}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptpubkey_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scriptpubkey_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptPubkey}\n    */\n\n  }, {\n    key: \"addr_keyhash\",\n    value:\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    function addr_keyhash() {\n      var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} addr_keyhash\n    * @returns {ScriptPubkey}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptPubkey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n      return ScriptPubkey.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptpubkey_from_json(ptr0, len0);\n      return ScriptPubkey.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(addr_keyhash) {\n      _assertClass(addr_keyhash, Ed25519KeyHash);\n\n      var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n      return ScriptPubkey.__wrap(ret);\n    }\n  }]);\n\n  return ScriptPubkey;\n}();\n/**\n*/\n\nexport var ScriptRef = /*#__PURE__*/function () {\n  function ScriptRef() {\n    _classCallCheck(this, ScriptRef);\n  }\n\n  _createClass(ScriptRef, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptref_free(ptr);\n    }\n    /**\n    * @param {Script} script\n    * @returns {ScriptRef}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(script) {\n      _assertClass(script, Script);\n\n      var ret = wasm.scriptref_new(this.ptr, script.ptr);\n      return ScriptRef.__wrap(ret);\n    }\n    /**\n    * @returns {Script}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var ret = wasm.scriptref_get(this.ptr);\n      return Script.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptRef.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return ScriptRef;\n}();\n/**\n*/\n\nexport var ScriptWitness = /*#__PURE__*/function () {\n  function ScriptWitness() {\n    _classCallCheck(this, ScriptWitness);\n  }\n\n  _createClass(ScriptWitness, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_scriptwitness_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_json\",\n    value: function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.scriptwitness_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.scriptwitness_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptWitness}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.scriptwitness_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScript | undefined}\n    */\n\n  }, {\n    key: \"as_native_witness\",\n    value: function as_native_witness() {\n      var ret = wasm.scriptwitness_as_native_witness(this.ptr);\n      return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusWitness | undefined}\n    */\n\n  }, {\n    key: \"as_plutus_witness\",\n    value: function as_plutus_witness() {\n      var ret = wasm.scriptwitness_as_plutus_witness(this.ptr);\n      return ret === 0 ? undefined : PlutusWitness.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(ScriptWitness.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.scriptwitness_from_json(ptr0, len0);\n      return ScriptWitness.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} native_script\n    * @returns {ScriptWitness}\n    */\n\n  }, {\n    key: \"new_native_witness\",\n    value: function new_native_witness(native_script) {\n      _assertClass(native_script, NativeScript);\n\n      var ret = wasm.scriptwitness_new_native_witness(native_script.ptr);\n      return ScriptWitness.__wrap(ret);\n    }\n    /**\n    * @param {PlutusWitness} plutus_witness\n    * @returns {ScriptWitness}\n    */\n\n  }, {\n    key: \"new_plutus_witness\",\n    value: function new_plutus_witness(plutus_witness) {\n      _assertClass(plutus_witness, PlutusWitness);\n\n      var ret = wasm.scriptwitness_new_plutus_witness(plutus_witness.ptr);\n      return ScriptWitness.__wrap(ret);\n    }\n  }]);\n\n  return ScriptWitness;\n}();\n/**\n*/\n\nexport var SingleHostAddr = /*#__PURE__*/function () {\n  function SingleHostAddr() {\n    _classCallCheck(this, SingleHostAddr);\n  }\n\n  _createClass(SingleHostAddr, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostAddr}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.singlehostaddr_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.singlehostaddr_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {SingleHostAddr}\n    */\n\n  }, {\n    key: \"port\",\n    value:\n    /**\n    * @returns {number | undefined}\n    */\n    function port() {\n      var ret = wasm.singlehostaddr_port(this.ptr);\n      return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {Ipv4 | undefined}\n    */\n\n  }, {\n    key: \"ipv4\",\n    value: function ipv4() {\n      var ret = wasm.singlehostaddr_ipv4(this.ptr);\n      return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Ipv6 | undefined}\n    */\n\n  }, {\n    key: \"ipv6\",\n    value: function ipv6() {\n      var ret = wasm.singlehostaddr_ipv6(this.ptr);\n      return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {Ipv4 | undefined} ipv4\n    * @param {Ipv6 | undefined} ipv6\n    * @returns {SingleHostAddr}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(SingleHostAddr.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n      return SingleHostAddr.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.singlehostaddr_from_json(ptr0, len0);\n      return SingleHostAddr.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(port, ipv4, ipv6) {\n      var ptr0 = 0;\n\n      if (!isLikeNone(ipv4)) {\n        _assertClass(ipv4, Ipv4);\n\n        ptr0 = ipv4.ptr;\n        ipv4.ptr = 0;\n      }\n\n      var ptr1 = 0;\n\n      if (!isLikeNone(ipv6)) {\n        _assertClass(ipv6, Ipv6);\n\n        ptr1 = ipv6.ptr;\n        ipv6.ptr = 0;\n      }\n\n      var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n      return SingleHostAddr.__wrap(ret);\n    }\n  }]);\n\n  return SingleHostAddr;\n}();\n/**\n*/\n\nexport var SingleHostName = /*#__PURE__*/function () {\n  function SingleHostName() {\n    _classCallCheck(this, SingleHostName);\n  }\n\n  _createClass(SingleHostName, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.singlehostname_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostName}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.singlehostname_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.singlehostname_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {SingleHostName}\n    */\n\n  }, {\n    key: \"port\",\n    value:\n    /**\n    * @returns {number | undefined}\n    */\n    function port() {\n      var ret = wasm.singlehostname_port(this.ptr);\n      return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {DNSRecordAorAAAA}\n    */\n\n  }, {\n    key: \"dns_name\",\n    value: function dns_name() {\n      var ret = wasm.singlehostname_dns_name(this.ptr);\n      return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {DNSRecordAorAAAA} dns_name\n    * @returns {SingleHostName}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(SingleHostName.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n      return SingleHostName.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.singlehostname_from_json(ptr0, len0);\n      return SingleHostName.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(port, dns_name) {\n      _assertClass(dns_name, DNSRecordAorAAAA);\n\n      var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n      return SingleHostName.__wrap(ret);\n    }\n  }]);\n\n  return SingleHostName;\n}();\n/**\n*/\n\nexport var StakeCredential = /*#__PURE__*/function () {\n  function StakeCredential() {\n    _classCallCheck(this, StakeCredential);\n  }\n\n  _createClass(StakeCredential, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @returns {StakeCredential}\n    */\n\n  }, {\n    key: \"to_keyhash\",\n    value:\n    /**\n    * @returns {Ed25519KeyHash | undefined}\n    */\n    function to_keyhash() {\n      var ret = wasm.stakecredential_to_keyhash(this.ptr);\n      return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHash | undefined}\n    */\n\n  }, {\n    key: \"to_scripthash\",\n    value: function to_scripthash() {\n      var ret = wasm.stakecredential_to_scripthash(this.ptr);\n      return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"kind\",\n    value: function kind() {\n      var ret = wasm.stakecredential_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakecredential_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredential}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakecredential_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.stakecredential_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeCredential}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(StakeCredential.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_keyhash\",\n    value: function from_keyhash(hash) {\n      _assertClass(hash, Ed25519KeyHash);\n\n      var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @returns {StakeCredential}\n    */\n\n  }, {\n    key: \"from_scripthash\",\n    value: function from_scripthash(hash) {\n      _assertClass(hash, ScriptHash);\n\n      var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n      return StakeCredential.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakecredential_from_json(ptr0, len0);\n      return StakeCredential.__wrap(ret);\n    }\n  }]);\n\n  return StakeCredential;\n}();\n/**\n*/\n\nexport var StakeCredentials = /*#__PURE__*/function () {\n  function StakeCredentials() {\n    _classCallCheck(this, StakeCredentials);\n  }\n\n  _createClass(StakeCredentials, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakecredentials_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredentials}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakecredentials_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.stakecredentials_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeCredentials}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.stakecredentials_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {StakeCredential}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.stakecredentials_get(this.ptr, index);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, StakeCredential);\n\n      wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(StakeCredentials.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n      return StakeCredentials.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakecredentials_from_json(ptr0, len0);\n      return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.stakecredentials_new();\n      return StakeCredentials.__wrap(ret);\n    }\n  }]);\n\n  return StakeCredentials;\n}();\n/**\n*/\n\nexport var StakeDelegation = /*#__PURE__*/function () {\n  function StakeDelegation() {\n    _classCallCheck(this, StakeDelegation);\n  }\n\n  _createClass(StakeDelegation, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakedelegation_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDelegation}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakedelegation_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.stakedelegation_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeDelegation}\n    */\n\n  }, {\n    key: \"stake_credential\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function stake_credential() {\n      var ret = wasm.stakedelegation_stake_credential(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n\n  }, {\n    key: \"pool_keyhash\",\n    value: function pool_keyhash() {\n      var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n      return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @returns {StakeDelegation}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(StakeDelegation.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n      return StakeDelegation.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakedelegation_from_json(ptr0, len0);\n      return StakeDelegation.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(stake_credential, pool_keyhash) {\n      _assertClass(stake_credential, StakeCredential);\n\n      _assertClass(pool_keyhash, Ed25519KeyHash);\n\n      var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n      return StakeDelegation.__wrap(ret);\n    }\n  }]);\n\n  return StakeDelegation;\n}();\n/**\n*/\n\nexport var StakeDeregistration = /*#__PURE__*/function () {\n  function StakeDeregistration() {\n    _classCallCheck(this, StakeDeregistration);\n  }\n\n  _createClass(StakeDeregistration, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakederegistration_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDeregistration}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakederegistration_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.stakederegistration_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeDeregistration}\n    */\n\n  }, {\n    key: \"stake_credential\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function stake_credential() {\n      var ret = wasm.stakederegistration_stake_credential(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeDeregistration}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(StakeDeregistration.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n      return StakeDeregistration.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakederegistration_from_json(ptr0, len0);\n      return StakeDeregistration.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(stake_credential) {\n      _assertClass(stake_credential, StakeCredential);\n\n      var ret = wasm.stakederegistration_new(stake_credential.ptr);\n      return StakeDeregistration.__wrap(ret);\n    }\n  }]);\n\n  return StakeDeregistration;\n}();\n/**\n*/\n\nexport var StakeRegistration = /*#__PURE__*/function () {\n  function StakeRegistration() {\n    _classCallCheck(this, StakeRegistration);\n  }\n\n  _createClass(StakeRegistration, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakeregistration_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeRegistration}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.stakeregistration_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.stakeregistration_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeRegistration}\n    */\n\n  }, {\n    key: \"stake_credential\",\n    value:\n    /**\n    * @returns {StakeCredential}\n    */\n    function stake_credential() {\n      var ret = wasm.stakeregistration_stake_credential(this.ptr);\n      return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeRegistration}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(StakeRegistration.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n      return StakeRegistration.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.stakeregistration_from_json(ptr0, len0);\n      return StakeRegistration.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(stake_credential) {\n      _assertClass(stake_credential, StakeCredential);\n\n      var ret = wasm.stakeregistration_new(stake_credential.ptr);\n      return StakeRegistration.__wrap(ret);\n    }\n  }]);\n\n  return StakeRegistration;\n}();\n/**\n*/\n\nexport var Strings = /*#__PURE__*/function () {\n  function Strings() {\n    _classCallCheck(this, Strings);\n  }\n\n  _createClass(Strings, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_strings_free(ptr);\n    }\n    /**\n    * @returns {Strings}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.strings_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {string}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.strings_get(retptr, this.ptr, index);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.strings_add(this.ptr, ptr0, len0);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Strings.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.strings_new();\n      return Strings.__wrap(ret);\n    }\n  }]);\n\n  return Strings;\n}();\n/**\n*/\n\nexport var TimelockExpiry = /*#__PURE__*/function () {\n  function TimelockExpiry() {\n    _classCallCheck(this, TimelockExpiry);\n  }\n\n  _createClass(TimelockExpiry, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockExpiry}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.timelockexpiry_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.timelockexpiry_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TimelockExpiry}\n    */\n\n  }, {\n    key: \"slot\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function slot() {\n      var ret = wasm.timelockexpiry_slot(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} slot\n    * @returns {TimelockExpiry}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TimelockExpiry.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n      return TimelockExpiry.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.timelockexpiry_from_json(ptr0, len0);\n      return TimelockExpiry.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(slot) {\n      _assertClass(slot, BigNum);\n\n      var ret = wasm.timelockexpiry_new(slot.ptr);\n      return TimelockExpiry.__wrap(ret);\n    }\n  }]);\n\n  return TimelockExpiry;\n}();\n/**\n*/\n\nexport var TimelockStart = /*#__PURE__*/function () {\n  function TimelockStart() {\n    _classCallCheck(this, TimelockStart);\n  }\n\n  _createClass(TimelockStart, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.timelockstart_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockStart}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.timelockstart_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.timelockstart_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TimelockStart}\n    */\n\n  }, {\n    key: \"slot\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function slot() {\n      var ret = wasm.timelockstart_slot(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} slot\n    * @returns {TimelockStart}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TimelockStart.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n      return TimelockStart.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.timelockstart_from_json(ptr0, len0);\n      return TimelockStart.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(slot) {\n      _assertClass(slot, BigNum);\n\n      var ret = wasm.timelockstart_new(slot.ptr);\n      return TimelockStart.__wrap(ret);\n    }\n  }]);\n\n  return TimelockStart;\n}();\n/**\n*/\n\nexport var Transaction = /*#__PURE__*/function () {\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n  }\n\n  _createClass(Transaction, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transaction_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transaction_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transaction_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Transaction}\n    */\n\n  }, {\n    key: \"body\",\n    value:\n    /**\n    * @returns {TransactionBody}\n    */\n    function body() {\n      var ret = wasm.transaction_body(this.ptr);\n      return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n\n  }, {\n    key: \"witness_set\",\n    value: function witness_set() {\n      var ret = wasm.transaction_witness_set(this.ptr);\n      return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n\n  }, {\n    key: \"is_valid\",\n    value: function is_valid() {\n      var ret = wasm.transaction_is_valid(this.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n\n  }, {\n    key: \"auxiliary_data\",\n    value: function auxiliary_data() {\n      var ret = wasm.transaction_auxiliary_data(this.ptr);\n      return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {boolean} valid\n    */\n\n  }, {\n    key: \"set_is_valid\",\n    value: function set_is_valid(valid) {\n      wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n    * @param {TransactionBody} body\n    * @param {TransactionWitnessSet} witness_set\n    * @param {AuxiliaryData | undefined} auxiliary_data\n    * @returns {Transaction}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Transaction.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transaction_from_bytes(ptr0, len0);\n      return Transaction.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transaction_from_json(ptr0, len0);\n      return Transaction.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(body, witness_set, auxiliary_data) {\n      _assertClass(body, TransactionBody);\n\n      _assertClass(witness_set, TransactionWitnessSet);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(auxiliary_data)) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n\n        ptr0 = auxiliary_data.ptr;\n        auxiliary_data.ptr = 0;\n      }\n\n      var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n      return Transaction.__wrap(ret);\n    }\n  }]);\n\n  return Transaction;\n}();\n/**\n*/\n\nexport var TransactionBodies = /*#__PURE__*/function () {\n  function TransactionBodies() {\n    _classCallCheck(this, TransactionBodies);\n  }\n\n  _createClass(TransactionBodies, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionbodies_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBodies}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionbodies_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionbodies_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionBodies}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionbodies_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBody}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionbodies_get(this.ptr, index);\n      return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionBody);\n\n      wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionBodies.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n      return TransactionBodies.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionbodies_from_json(ptr0, len0);\n      return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionbodies_new();\n      return TransactionBodies.__wrap(ret);\n    }\n  }]);\n\n  return TransactionBodies;\n}();\n/**\n*/\n\nexport var TransactionBody = /*#__PURE__*/function () {\n  function TransactionBody() {\n    _classCallCheck(this, TransactionBody);\n  }\n\n  _createClass(TransactionBody, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionbody_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBody}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionbody_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionbody_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionBody}\n    */\n\n  }, {\n    key: \"inputs\",\n    value:\n    /**\n    * @returns {TransactionInputs}\n    */\n    function inputs() {\n      var ret = wasm.transactionbody_inputs(this.ptr);\n      return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n\n  }, {\n    key: \"outputs\",\n    value: function outputs() {\n      var ret = wasm.transactionbody_outputs(this.ptr);\n      return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"fee\",\n    value: function fee() {\n      var ret = wasm.transactionbody_fee(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"ttl\",\n    value: function ttl() {\n      var ret = wasm.transactionbody_ttl(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n\n  }, {\n    key: \"set_certs\",\n    value: function set_certs(certs) {\n      _assertClass(certs, Certificates);\n\n      wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n\n  }, {\n    key: \"certs\",\n    value: function certs() {\n      var ret = wasm.transactionbody_certs(this.ptr);\n      return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n\n  }, {\n    key: \"set_withdrawals\",\n    value: function set_withdrawals(withdrawals) {\n      _assertClass(withdrawals, Withdrawals);\n\n      wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n\n  }, {\n    key: \"withdrawals\",\n    value: function withdrawals() {\n      var ret = wasm.transactionbody_withdrawals(this.ptr);\n      return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * @param {Update} update\n    */\n\n  }, {\n    key: \"set_update\",\n    value: function set_update(update) {\n      _assertClass(update, Update);\n\n      wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n    * @returns {Update | undefined}\n    */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      var ret = wasm.transactionbody_update(this.ptr);\n      return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n    * @param {AuxiliaryDataHash} auxiliary_data_hash\n    */\n\n  }, {\n    key: \"set_auxiliary_data_hash\",\n    value: function set_auxiliary_data_hash(auxiliary_data_hash) {\n      _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n\n      wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataHash | undefined}\n    */\n\n  }, {\n    key: \"auxiliary_data_hash\",\n    value: function auxiliary_data_hash() {\n      var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n      return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} validity_start_interval\n    */\n\n  }, {\n    key: \"set_validity_start_interval\",\n    value: function set_validity_start_interval(validity_start_interval) {\n      _assertClass(validity_start_interval, BigNum);\n\n      wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"validity_start_interval\",\n    value: function validity_start_interval() {\n      var ret = wasm.transactionbody_validity_start_interval(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Mint} mint\n    */\n\n  }, {\n    key: \"set_mint\",\n    value: function set_mint(mint) {\n      _assertClass(mint, Mint);\n\n      wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n    * @returns {Mint | undefined}\n    */\n\n  }, {\n    key: \"mint\",\n    value: function mint() {\n      var ret = wasm.transactionbody_mint(this.ptr);\n      return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * This function returns the mint value of the transaction\n    * Use `.mint()` instead.\n    * @returns {Mint | undefined}\n    */\n\n  }, {\n    key: \"multiassets\",\n    value: function multiassets() {\n      var ret = wasm.transactionbody_multiassets(this.ptr);\n      return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @param {ScriptDataHash} script_data_hash\n    */\n\n  }, {\n    key: \"set_script_data_hash\",\n    value: function set_script_data_hash(script_data_hash) {\n      _assertClass(script_data_hash, ScriptDataHash);\n\n      wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n    * @returns {ScriptDataHash | undefined}\n    */\n\n  }, {\n    key: \"script_data_hash\",\n    value: function script_data_hash() {\n      var ret = wasm.transactionbody_script_data_hash(this.ptr);\n      return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} collateral\n    */\n\n  }, {\n    key: \"set_collateral\",\n    value: function set_collateral(collateral) {\n      _assertClass(collateral, TransactionInputs);\n\n      wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n\n  }, {\n    key: \"collateral\",\n    value: function collateral() {\n      var ret = wasm.transactionbody_collateral(this.ptr);\n      return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHashes} required_signers\n    */\n\n  }, {\n    key: \"set_required_signers\",\n    value: function set_required_signers(required_signers) {\n      _assertClass(required_signers, Ed25519KeyHashes);\n\n      wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n\n  }, {\n    key: \"required_signers\",\n    value: function required_signers() {\n      var ret = wasm.transactionbody_required_signers(this.ptr);\n      return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @param {NetworkId} network_id\n    */\n\n  }, {\n    key: \"set_network_id\",\n    value: function set_network_id(network_id) {\n      _assertClass(network_id, NetworkId);\n\n      wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n    * @returns {NetworkId | undefined}\n    */\n\n  }, {\n    key: \"network_id\",\n    value: function network_id() {\n      var ret = wasm.transactionbody_network_id(this.ptr);\n      return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} collateral_return\n    */\n\n  }, {\n    key: \"set_collateral_return\",\n    value: function set_collateral_return(collateral_return) {\n      _assertClass(collateral_return, TransactionOutput);\n\n      wasm.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n    * @returns {TransactionOutput | undefined}\n    */\n\n  }, {\n    key: \"collateral_return\",\n    value: function collateral_return() {\n      var ret = wasm.transactionbody_collateral_return(this.ptr);\n      return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} total_collateral\n    */\n\n  }, {\n    key: \"set_total_collateral\",\n    value: function set_total_collateral(total_collateral) {\n      _assertClass(total_collateral, BigNum);\n\n      wasm.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"total_collateral\",\n    value: function total_collateral() {\n      var ret = wasm.transactionbody_total_collateral(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} reference_inputs\n    */\n\n  }, {\n    key: \"set_reference_inputs\",\n    value: function set_reference_inputs(reference_inputs) {\n      _assertClass(reference_inputs, TransactionInputs);\n\n      wasm.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n\n  }, {\n    key: \"reference_inputs\",\n    value: function reference_inputs() {\n      var ret = wasm.transactionbody_reference_inputs(this.ptr);\n      return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @param {BigNum | undefined} ttl\n    * @returns {TransactionBody}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionBody.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n      return TransactionBody.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionbody_from_json(ptr0, len0);\n      return TransactionBody.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(inputs, outputs, fee, ttl) {\n      _assertClass(inputs, TransactionInputs);\n\n      _assertClass(outputs, TransactionOutputs);\n\n      _assertClass(fee, BigNum);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(ttl)) {\n        _assertClass(ttl, BigNum);\n\n        ptr0 = ttl.ptr;\n        ttl.ptr = 0;\n      }\n\n      var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, ptr0);\n      return TransactionBody.__wrap(ret);\n    }\n  }]);\n\n  return TransactionBody;\n}();\n/**\n*/\n\nexport var TransactionBuilder = /*#__PURE__*/function () {\n  function TransactionBuilder() {\n    _classCallCheck(this, TransactionBuilder);\n  }\n\n  _createClass(TransactionBuilder, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n    * the outputs that have already been added.\n    * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n    * Adding a change output must be called after via TransactionBuilder::balance()\n    * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n    * @param {TransactionUnspentOutputs} inputs\n    */\n\n  }, {\n    key: \"add_inputs_from\",\n    value: function add_inputs_from(inputs) {\n      _assertClass(inputs, TransactionUnspentOutputs);\n\n      wasm.transactionbuilder_add_inputs_from(this.ptr, inputs.ptr);\n    }\n    /**\n    * We have to know what kind of inputs these are to know what kind of mock witnesses to create since\n    * 1) mock witnesses have different lengths depending on the type which changes the expecting fee\n    * 2) Witnesses are a set so we need to get rid of duplicates to avoid over-estimating the fee\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n\n  }, {\n    key: \"add_key_input\",\n    value: function add_key_input(hash, input, amount) {\n      _assertClass(hash, Ed25519KeyHash);\n\n      _assertClass(input, TransactionInput);\n\n      _assertClass(amount, Value);\n\n      wasm.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @param {ScriptWitness} script_witness\n    */\n\n  }, {\n    key: \"add_script_input\",\n    value: function add_script_input(hash, input, amount, script_witness) {\n      _assertClass(hash, ScriptHash);\n\n      _assertClass(input, TransactionInput);\n\n      _assertClass(amount, Value);\n\n      _assertClass(script_witness, ScriptWitness);\n\n      wasm.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr, script_witness.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n\n  }, {\n    key: \"add_bootstrap_input\",\n    value: function add_bootstrap_input(hash, input, amount) {\n      _assertClass(hash, ByronAddress);\n\n      _assertClass(input, TransactionInput);\n\n      _assertClass(amount, Value);\n\n      wasm.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @param {ScriptWitness | undefined} script_witness\n    */\n\n  }, {\n    key: \"add_input\",\n    value: function add_input(address, input, amount, script_witness) {\n      _assertClass(address, Address);\n\n      _assertClass(input, TransactionInput);\n\n      _assertClass(amount, Value);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(script_witness)) {\n        _assertClass(script_witness, ScriptWitness);\n\n        ptr0 = script_witness.ptr;\n        script_witness.ptr = 0;\n      }\n\n      wasm.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr, ptr0);\n    }\n    /**\n    * @param {TransactionInput} reference_input\n    */\n\n  }, {\n    key: \"add_reference_input\",\n    value: function add_reference_input(reference_input) {\n      _assertClass(reference_input, TransactionInput);\n\n      wasm.transactionbuilder_add_reference_input(this.ptr, reference_input.ptr);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"fee_for_input\",\n    value: function fee_for_input(address, input, amount) {\n      _assertClass(address, Address);\n\n      _assertClass(input, TransactionInput);\n\n      _assertClass(amount, Value);\n\n      var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * Add explicit output via a TransactionOutput object\n    * @param {TransactionOutput} output\n    */\n\n  }, {\n    key: \"add_output\",\n    value: function add_output(output) {\n      _assertClass(output, TransactionOutput);\n\n      wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n    * Add plutus scripts via a PlutusScripts object\n    * @param {PlutusScript} plutus_script\n    */\n\n  }, {\n    key: \"add_plutus_script\",\n    value: function add_plutus_script(plutus_script) {\n      _assertClass(plutus_script, PlutusScript);\n\n      wasm.transactionbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n    * Add plutus data via a PlutusData object\n    * @param {PlutusData} plutus_data\n    */\n\n  }, {\n    key: \"add_plutus_data\",\n    value: function add_plutus_data(plutus_data) {\n      _assertClass(plutus_data, PlutusData);\n\n      wasm.transactionbuilder_add_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n    * Add native scripts via a NativeScripts object\n    * @param {NativeScript} native_script\n    */\n\n  }, {\n    key: \"add_native_script\",\n    value: function add_native_script(native_script) {\n      _assertClass(native_script, NativeScript);\n\n      wasm.transactionbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n    * Add certificate via a Certificates object\n    * @param {Certificate} certificate\n    * @param {ScriptWitness | undefined} script_witness\n    */\n\n  }, {\n    key: \"add_certificate\",\n    value: function add_certificate(certificate, script_witness) {\n      _assertClass(certificate, Certificate);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(script_witness)) {\n        _assertClass(script_witness, ScriptWitness);\n\n        ptr0 = script_witness.ptr;\n        script_witness.ptr = 0;\n      }\n\n      wasm.transactionbuilder_add_certificate(this.ptr, certificate.ptr, ptr0);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {TransactionOutput} output\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"fee_for_output\",\n    value: function fee_for_output(output) {\n      _assertClass(output, TransactionOutput);\n\n      var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ttl\n    */\n\n  }, {\n    key: \"set_ttl\",\n    value: function set_ttl(ttl) {\n      _assertClass(ttl, BigNum);\n\n      wasm.transactionbuilder_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n    * @param {BigNum} validity_start_interval\n    */\n\n  }, {\n    key: \"set_validity_start_interval\",\n    value: function set_validity_start_interval(validity_start_interval) {\n      _assertClass(validity_start_interval, BigNum);\n\n      wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n    * @param {RewardAddress} reward_address\n    * @param {BigNum} coin\n    * @param {ScriptWitness | undefined} script_witness\n    */\n\n  }, {\n    key: \"add_withdrawal\",\n    value: function add_withdrawal(reward_address, coin, script_witness) {\n      _assertClass(reward_address, RewardAddress);\n\n      _assertClass(coin, BigNum);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(script_witness)) {\n        _assertClass(script_witness, ScriptWitness);\n\n        ptr0 = script_witness.ptr;\n        script_witness.ptr = 0;\n      }\n\n      wasm.transactionbuilder_add_withdrawal(this.ptr, reward_address.ptr, coin.ptr, ptr0);\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n\n  }, {\n    key: \"auxiliary_data\",\n    value: function auxiliary_data() {\n      var ret = wasm.transactionbuilder_auxiliary_data(this.ptr);\n      return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * Set explicit auxiliary data via an AuxiliaryData object\n    * It might contain some metadata plus native or Plutus scripts\n    * @param {AuxiliaryData} auxiliary_data\n    */\n\n  }, {\n    key: \"set_auxiliary_data\",\n    value: function set_auxiliary_data(auxiliary_data) {\n      _assertClass(auxiliary_data, AuxiliaryData);\n\n      wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n    * Set metadata using a GeneralTransactionMetadata object\n    * It will be set to the existing or new auxiliary data in this builder\n    * @param {GeneralTransactionMetadata} metadata\n    */\n\n  }, {\n    key: \"set_metadata\",\n    value: function set_metadata(metadata) {\n      _assertClass(metadata, GeneralTransactionMetadata);\n\n      wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} val\n    */\n\n  }, {\n    key: \"add_metadatum\",\n    value: function add_metadatum(key, val) {\n      _assertClass(key, BigNum);\n\n      _assertClass(val, TransactionMetadatum);\n\n      wasm.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n    * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {string} val\n    */\n\n  }, {\n    key: \"add_json_metadatum\",\n    value: function add_json_metadatum(key, val) {\n      _assertClass(key, BigNum);\n\n      var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.transactionbuilder_add_json_metadatum(this.ptr, key.ptr, ptr0, len0);\n    }\n    /**\n    * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {string} val\n    * @param {number} schema\n    */\n\n  }, {\n    key: \"add_json_metadatum_with_schema\",\n    value: function add_json_metadatum_with_schema(key, val, schema) {\n      _assertClass(key, BigNum);\n\n      var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      wasm.transactionbuilder_add_json_metadatum_with_schema(this.ptr, key.ptr, ptr0, len0, schema);\n    }\n    /**\n    * Returns a copy of the current mint state in the builder\n    * @returns {Mint | undefined}\n    */\n\n  }, {\n    key: \"mint\",\n    value: function mint() {\n      var ret = wasm.transactionbuilder_mint(this.ptr);\n      return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n\n  }, {\n    key: \"certificates\",\n    value: function certificates() {\n      var ret = wasm.transactionbuilder_certificates(this.ptr);\n      return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n\n  }, {\n    key: \"withdrawals\",\n    value: function withdrawals() {\n      var ret = wasm.transactionbuilder_withdrawals(this.ptr);\n      return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the current witness native scripts in the builder\n    * @returns {NativeScripts | undefined}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value: function native_scripts() {\n      var ret = wasm.transactionbuilder_native_scripts(this.ptr);\n      return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * Add a mint entry to this builder using a PolicyID and MintAssets object\n    * It will be securely added to existing or new Mint in this builder\n    * It will securely add assets to an existing PolicyID\n    * But it will replace/overwrite any existing mint assets with the same PolicyID\n    * first redeemer applied to a PolicyID is taken for all further assets added to the same PolicyID\n    * @param {ScriptHash} policy_id\n    * @param {MintAssets} mint_assets\n    * @param {ScriptWitness | undefined} script_witness\n    */\n\n  }, {\n    key: \"add_mint\",\n    value: function add_mint(policy_id, mint_assets, script_witness) {\n      _assertClass(policy_id, ScriptHash);\n\n      _assertClass(mint_assets, MintAssets);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(script_witness)) {\n        _assertClass(script_witness, ScriptWitness);\n\n        ptr0 = script_witness.ptr;\n        script_witness.ptr = 0;\n      }\n\n      wasm.transactionbuilder_add_mint(this.ptr, policy_id.ptr, mint_assets.ptr, ptr0);\n    }\n    /**\n    * @param {TransactionBuilderConfig} cfg\n    * @returns {TransactionBuilder}\n    */\n\n  }, {\n    key: \"script_data_hash\",\n    value:\n    /**\n    * @returns {ScriptDataHash | undefined}\n    */\n    function script_data_hash() {\n      var ret = wasm.transactionbuilder_script_data_hash(this.ptr);\n      return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @param {TransactionInput} collateral\n    */\n\n  }, {\n    key: \"add_collateral\",\n    value: function add_collateral(address, collateral) {\n      _assertClass(address, Address);\n\n      _assertClass(collateral, TransactionInput);\n\n      wasm.transactionbuilder_add_collateral(this.ptr, address.ptr, collateral.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n\n  }, {\n    key: \"collateral\",\n    value: function collateral() {\n      var ret = wasm.transactionbuilder_collateral(this.ptr);\n      return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} required_signer\n    */\n\n  }, {\n    key: \"add_required_signer\",\n    value: function add_required_signer(required_signer) {\n      _assertClass(required_signer, Ed25519KeyHash);\n\n      wasm.transactionbuilder_add_required_signer(this.ptr, required_signer.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n\n  }, {\n    key: \"required_signers\",\n    value: function required_signers() {\n      var ret = wasm.transactionbuilder_required_signers(this.ptr);\n      return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @param {NetworkId} network_id\n    */\n\n  }, {\n    key: \"set_network_id\",\n    value: function set_network_id(network_id) {\n      _assertClass(network_id, NetworkId);\n\n      var ptr0 = network_id.ptr;\n      network_id.ptr = 0;\n      wasm.transactionbuilder_set_network_id(this.ptr, ptr0);\n    }\n    /**\n    * @returns {NetworkId | undefined}\n    */\n\n  }, {\n    key: \"network_id\",\n    value: function network_id() {\n      var ret = wasm.transactionbuilder_network_id(this.ptr);\n      return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemers | undefined}\n    */\n\n  }, {\n    key: \"redeemers\",\n    value: function redeemers() {\n      var ret = wasm.transactionbuilder_redeemers(this.ptr);\n      return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n    * does not include refunds or withdrawals\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"get_explicit_input\",\n    value: function get_explicit_input() {\n      var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * withdrawals and refunds\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"get_implicit_input\",\n    value: function get_implicit_input() {\n      var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * Return explicit input plus implicit input plus mint\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"get_total_input\",\n    value: function get_total_input() {\n      var ret = wasm.transactionbuilder_get_total_input(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * Return explicit output plus implicit output plus burn (does not consider fee directly)\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"get_total_output\",\n    value: function get_total_output() {\n      var ret = wasm.transactionbuilder_get_total_output(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * does not include fee\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"get_explicit_output\",\n    value: function get_explicit_output() {\n      var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"get_deposit\",\n    value: function get_deposit() {\n      var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"get_fee_if_set\",\n    value: function get_fee_if_set() {\n      var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * Make sure to call this function last after setting all other tx-body properties\n    * Editing inputs, outputs, mint, etc. after change been calculated\n    * might cause a mismatch in calculated fee versus the required fee\n    * @param {Address} address\n    * @param {Datum | undefined} datum\n    */\n\n  }, {\n    key: \"balance\",\n    value: function balance(address, datum) {\n      _assertClass(address, Address);\n\n      var ptr0 = 0;\n\n      if (!isLikeNone(datum)) {\n        _assertClass(datum, Datum);\n\n        ptr0 = datum.ptr;\n        datum.ptr = 0;\n      }\n\n      wasm.transactionbuilder_balance(this.ptr, address.ptr, ptr0);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * Make sure to call this function last after setting all other tx-body properties\n    * Editing inputs, outputs, mint, etc. after change been calculated\n    * might cause a mismatch in calculated fee versus the required fee\n    * @param {Address} address\n    * @returns {boolean}\n    */\n\n  }, {\n    key: \"add_change_if_needed\",\n    value: function add_change_if_needed(address) {\n      _assertClass(address, Address);\n\n      var ret = wasm.transactionbuilder_add_change_if_needed(this.ptr, address.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"full_size\",\n    value: function full_size() {\n      var ret = wasm.transactionbuilder_full_size(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n\n  }, {\n    key: \"output_sizes\",\n    value: function output_sizes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU32FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 4);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n\n  }, {\n    key: \"outputs\",\n    value: function outputs() {\n      var ret = wasm.transactionbuilder_outputs(this.ptr);\n      return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * Returns full Transaction object with the body and the auxiliary data\n    * NOTE: witness_set will contain all mint_scripts if any been added or set\n    * takes fetched ex units into consideration\n    * async call\n    * NOTE: is_valid set to true\n    * @returns {Promise<Transaction>}\n    */\n\n  }, {\n    key: \"construct\",\n    value: function construct() {\n      var ptr = this.__destroy_into_raw();\n\n      var ret = wasm.transactionbuilder_construct(ptr);\n      return takeObject(ret);\n    }\n    /**\n    * Returns full Transaction object with the body and the auxiliary data\n    * NOTE: witness_set will contain all mint_scripts if any been added or set\n    * NOTE: is_valid set to true\n    * @returns {Transaction}\n    */\n\n  }, {\n    key: \"build_tx\",\n    value: function build_tx() {\n      var ret = wasm.transactionbuilder_build_tx(this.ptr);\n      return Transaction.__wrap(ret);\n    }\n    /**\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n    * this is done to simplify the library code, but can be fixed later\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"min_fee\",\n    value: function min_fee() {\n      var ret = wasm.transactionbuilder_min_fee(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionBuilder.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(cfg) {\n      _assertClass(cfg, TransactionBuilderConfig);\n\n      var ret = wasm.transactionbuilder_new(cfg.ptr);\n      return TransactionBuilder.__wrap(ret);\n    }\n  }]);\n\n  return TransactionBuilder;\n}();\n/**\n*/\n\nexport var TransactionBuilderConfig = /*#__PURE__*/function () {\n  function TransactionBuilderConfig() {\n    _classCallCheck(this, TransactionBuilderConfig);\n  }\n\n  _createClass(TransactionBuilderConfig, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionbuilderconfig_free(ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionBuilderConfig.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return TransactionBuilderConfig;\n}();\n/**\n*/\n\nexport var TransactionBuilderConfigBuilder = /*#__PURE__*/function () {\n  function TransactionBuilderConfigBuilder() {\n    _classCallCheck(this, TransactionBuilderConfigBuilder);\n  }\n\n  _createClass(TransactionBuilderConfigBuilder, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"fee_algo\",\n    value:\n    /**\n    * @param {LinearFee} fee_algo\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    function fee_algo(_fee_algo) {\n      _assertClass(_fee_algo, LinearFee);\n\n      var ret = wasm.transactionbuilderconfigbuilder_fee_algo(this.ptr, _fee_algo.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coins_per_utxo_word\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"coins_per_utxo_word\",\n    value: function coins_per_utxo_word(_coins_per_utxo_word) {\n      _assertClass(_coins_per_utxo_word, BigNum);\n\n      var ret = wasm.transactionbuilderconfigbuilder_coins_per_utxo_word(this.ptr, _coins_per_utxo_word.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"pool_deposit\",\n    value: function pool_deposit(_pool_deposit) {\n      _assertClass(_pool_deposit, BigNum);\n\n      var ret = wasm.transactionbuilderconfigbuilder_pool_deposit(this.ptr, _pool_deposit.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key_deposit\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"key_deposit\",\n    value: function key_deposit(_key_deposit) {\n      _assertClass(_key_deposit, BigNum);\n\n      var ret = wasm.transactionbuilderconfigbuilder_key_deposit(this.ptr, _key_deposit.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"max_value_size\",\n    value: function max_value_size(_max_value_size) {\n      var ret = wasm.transactionbuilderconfigbuilder_max_value_size(this.ptr, _max_value_size);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {number} max_tx_size\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"max_tx_size\",\n    value: function max_tx_size(_max_tx_size) {\n      var ret = wasm.transactionbuilderconfigbuilder_max_tx_size(this.ptr, _max_tx_size);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} ex_unit_prices\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"ex_unit_prices\",\n    value: function ex_unit_prices(_ex_unit_prices) {\n      _assertClass(_ex_unit_prices, ExUnitPrices);\n\n      var ret = wasm.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, _ex_unit_prices.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {Costmdls} costmdls\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"costmdls\",\n    value: function costmdls(_costmdls) {\n      _assertClass(_costmdls, Costmdls);\n\n      var ret = wasm.transactionbuilderconfigbuilder_costmdls(this.ptr, _costmdls.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {Blockfrost} blockfrost\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"blockfrost\",\n    value: function blockfrost(_blockfrost) {\n      _assertClass(_blockfrost, Blockfrost);\n\n      var ret = wasm.transactionbuilderconfigbuilder_blockfrost(this.ptr, _blockfrost.ptr);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {boolean} prefer_pure_change\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"prefer_pure_change\",\n    value: function prefer_pure_change(_prefer_pure_change) {\n      var ret = wasm.transactionbuilderconfigbuilder_prefer_pure_change(this.ptr, _prefer_pure_change);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {boolean} prefer_split_change\n    * @param {BigNum} collateral_amount\n    * @param {BigNum} min_split_amount_ada\n    * @param {number} native_asset_chunk_size\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n\n  }, {\n    key: \"prefer_split_change\",\n    value: function prefer_split_change(_prefer_split_change, collateral_amount, min_split_amount_ada, native_asset_chunk_size) {\n      _assertClass(collateral_amount, BigNum);\n\n      var ptr0 = collateral_amount.ptr;\n      collateral_amount.ptr = 0;\n\n      _assertClass(min_split_amount_ada, BigNum);\n\n      var ptr1 = min_split_amount_ada.ptr;\n      min_split_amount_ada.ptr = 0;\n      var ret = wasm.transactionbuilderconfigbuilder_prefer_split_change(this.ptr, _prefer_split_change, ptr0, ptr1, native_asset_chunk_size);\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBuilderConfig}\n    */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var ret = wasm.transactionbuilderconfigbuilder_build(this.ptr);\n      return TransactionBuilderConfig.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionbuilderconfigbuilder_new();\n      return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n  }]);\n\n  return TransactionBuilderConfigBuilder;\n}();\n/**\n*/\n\nexport var TransactionHash = /*#__PURE__*/function () {\n  function TransactionHash() {\n    _classCallCheck(this, TransactionHash);\n  }\n\n  _createClass(TransactionHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionhash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {TransactionHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionhash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {TransactionHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n      return TransactionHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n      return TransactionHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionhash_from_hex(ptr0, len0);\n      return TransactionHash.__wrap(ret);\n    }\n  }]);\n\n  return TransactionHash;\n}();\n/**\n*/\n\nexport var TransactionIndexes = /*#__PURE__*/function () {\n  function TransactionIndexes() {\n    _classCallCheck(this, TransactionIndexes);\n  }\n\n  _createClass(TransactionIndexes, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionindexes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionindexes_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionIndexes}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionindexes_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionindexes_get(this.ptr, index);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, BigNum);\n\n      wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionIndexes.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionindexes_from_bytes(ptr0, len0);\n      return TransactionIndexes.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionIndexes}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionindexes_new();\n      return TransactionIndexes.__wrap(ret);\n    }\n  }]);\n\n  return TransactionIndexes;\n}();\n/**\n*/\n\nexport var TransactionInput = /*#__PURE__*/function () {\n  function TransactionInput() {\n    _classCallCheck(this, TransactionInput);\n  }\n\n  _createClass(TransactionInput, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactioninput_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInput}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactioninput_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactioninput_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionInput}\n    */\n\n  }, {\n    key: \"transaction_id\",\n    value:\n    /**\n    * @returns {TransactionHash}\n    */\n    function transaction_id() {\n      var ret = wasm.transactioninput_transaction_id(this.ptr);\n      return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"index\",\n    value: function index() {\n      var ret = wasm.transactioninput_index(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionHash} transaction_id\n    * @param {BigNum} index\n    * @returns {TransactionInput}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionInput.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n      return TransactionInput.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactioninput_from_json(ptr0, len0);\n      return TransactionInput.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(transaction_id, index) {\n      _assertClass(transaction_id, TransactionHash);\n\n      _assertClass(index, BigNum);\n\n      var ret = wasm.transactioninput_new(transaction_id.ptr, index.ptr);\n      return TransactionInput.__wrap(ret);\n    }\n  }]);\n\n  return TransactionInput;\n}();\n/**\n*/\n\nexport var TransactionInputs = /*#__PURE__*/function () {\n  function TransactionInputs() {\n    _classCallCheck(this, TransactionInputs);\n  }\n\n  _createClass(TransactionInputs, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactioninputs_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInputs}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactioninputs_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactioninputs_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionInputs}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactioninputs_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactioninputs_get(this.ptr, index);\n      return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionInput);\n\n      wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionInputs.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n      return TransactionInputs.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactioninputs_from_json(ptr0, len0);\n      return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactioninputs_new();\n      return TransactionInputs.__wrap(ret);\n    }\n  }]);\n\n  return TransactionInputs;\n}();\n/**\n*/\n\nexport var TransactionMetadatum = /*#__PURE__*/function () {\n  function TransactionMetadatum() {\n    _classCallCheck(this, TransactionMetadatum);\n  }\n\n  _createClass(TransactionMetadatum, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"kind\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function kind() {\n      var ret = wasm.transactionmetadatum_kind(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n\n  }, {\n    key: \"as_map\",\n    value: function as_map() {\n      var ret = wasm.transactionmetadatum_as_map(this.ptr);\n      return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {MetadataList}\n    */\n\n  }, {\n    key: \"as_list\",\n    value: function as_list() {\n      var ret = wasm.transactionmetadatum_as_list(this.ptr);\n      return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {Int}\n    */\n\n  }, {\n    key: \"as_int\",\n    value: function as_int() {\n      var ret = wasm.transactionmetadatum_as_int(this.ptr);\n      return Int.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"as_bytes\",\n    value: function as_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {string}\n    */\n\n  }, {\n    key: \"as_text\",\n    value: function as_text() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionmetadatum_as_text(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionMetadatum.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataMap} map\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"new_map\",\n    value: function new_map(map) {\n      _assertClass(map, MetadataMap);\n\n      var ret = wasm.transactionmetadatum_new_map(map.ptr);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataList} list\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"new_list\",\n    value: function new_list(list) {\n      _assertClass(list, MetadataList);\n\n      var ret = wasm.transactionmetadatum_new_list(list.ptr);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"new_int\",\n    value: function new_int(int) {\n      _assertClass(int, Int);\n\n      var ret = wasm.transactionmetadatum_new_int(int.ptr);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"new_bytes\",\n    value: function new_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n      return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {TransactionMetadatum}\n    */\n\n  }, {\n    key: \"new_text\",\n    value: function new_text(text) {\n      var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n      return TransactionMetadatum.__wrap(ret);\n    }\n  }]);\n\n  return TransactionMetadatum;\n}();\n/**\n*/\n\nexport var TransactionMetadatumLabels = /*#__PURE__*/function () {\n  function TransactionMetadatumLabels() {\n    _classCallCheck(this, TransactionMetadatumLabels);\n  }\n\n  _createClass(TransactionMetadatumLabels, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatumLabels}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionmetadatumlabels_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, BigNum);\n\n      wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionMetadatumLabels.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n      return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionmetadatumlabels_new();\n      return TransactionMetadatumLabels.__wrap(ret);\n    }\n  }]);\n\n  return TransactionMetadatumLabels;\n}();\n/**\n*/\n\nexport var TransactionOutput = /*#__PURE__*/function () {\n  function TransactionOutput() {\n    _classCallCheck(this, TransactionOutput);\n  }\n\n  _createClass(TransactionOutput, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionoutput_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutput}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionoutput_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionoutput_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionOutput}\n    */\n\n  }, {\n    key: \"address\",\n    value:\n    /**\n    * @returns {Address}\n    */\n    function address() {\n      var ret = wasm.transactionoutput_address(this.ptr);\n      return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"amount\",\n    value: function amount() {\n      var ret = wasm.transactionoutput_amount(this.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @returns {Datum | undefined}\n    */\n\n  }, {\n    key: \"datum\",\n    value: function datum() {\n      var ret = wasm.transactionoutput_datum(this.ptr);\n      return ret === 0 ? undefined : Datum.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptRef | undefined}\n    */\n\n  }, {\n    key: \"script_ref\",\n    value: function script_ref() {\n      var ret = wasm.transactionoutput_script_ref(this.ptr);\n      return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n    * @param {Datum} datum\n    */\n\n  }, {\n    key: \"set_datum\",\n    value: function set_datum(datum) {\n      _assertClass(datum, Datum);\n\n      wasm.transactionoutput_set_datum(this.ptr, datum.ptr);\n    }\n    /**\n    * @param {ScriptRef} script_ref\n    */\n\n  }, {\n    key: \"set_script_ref\",\n    value: function set_script_ref(script_ref) {\n      _assertClass(script_ref, ScriptRef);\n\n      wasm.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n    * @param {Address} address\n    * @param {Value} amount\n    * @returns {TransactionOutput}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionOutput.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n      return TransactionOutput.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionoutput_from_json(ptr0, len0);\n      return TransactionOutput.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(address, amount) {\n      _assertClass(address, Address);\n\n      _assertClass(amount, Value);\n\n      var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n      return TransactionOutput.__wrap(ret);\n    }\n  }]);\n\n  return TransactionOutput;\n}();\n/**\n*/\n\nexport var TransactionOutputAmountBuilder = /*#__PURE__*/function () {\n  function TransactionOutputAmountBuilder() {\n    _classCallCheck(this, TransactionOutputAmountBuilder);\n  }\n\n  _createClass(TransactionOutputAmountBuilder, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n    * @param {Value} amount\n    * @returns {TransactionOutputAmountBuilder}\n    */\n\n  }, {\n    key: \"with_value\",\n    value: function with_value(amount) {\n      _assertClass(amount, Value);\n\n      var ret = wasm.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n      return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {TransactionOutputAmountBuilder}\n    */\n\n  }, {\n    key: \"with_coin\",\n    value: function with_coin(coin) {\n      _assertClass(coin, BigNum);\n\n      var ret = wasm.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n      return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @param {MultiAsset} multiasset\n    * @returns {TransactionOutputAmountBuilder}\n    */\n\n  }, {\n    key: \"with_coin_and_asset\",\n    value: function with_coin_and_asset(coin, multiasset) {\n      _assertClass(coin, BigNum);\n\n      _assertClass(multiasset, MultiAsset);\n\n      var ret = wasm.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n      return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    * @param {BigNum} coins_per_utxo_word\n    * @returns {TransactionOutputAmountBuilder}\n    */\n\n  }, {\n    key: \"with_asset_and_min_required_coin\",\n    value: function with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n      _assertClass(multiasset, MultiAsset);\n\n      _assertClass(coins_per_utxo_word, BigNum);\n\n      var ret = wasm.transactionoutputamountbuilder_with_asset_and_min_required_coin(this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n      return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var ret = wasm.transactionoutputamountbuilder_build(this.ptr);\n      return TransactionOutput.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionOutputAmountBuilder.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  return TransactionOutputAmountBuilder;\n}();\n/**\n* We introduce a builder-pattern format for creating transaction outputs\n* This is because:\n* 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n* 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n* 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n*/\n\nexport var TransactionOutputBuilder = /*#__PURE__*/function () {\n  function TransactionOutputBuilder() {\n    _classCallCheck(this, TransactionOutputBuilder);\n  }\n\n  _createClass(TransactionOutputBuilder, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n    * @returns {TransactionOutputBuilder}\n    */\n\n  }, {\n    key: \"with_address\",\n    value:\n    /**\n    * @param {Address} address\n    * @returns {TransactionOutputBuilder}\n    */\n    function with_address(address) {\n      _assertClass(address, Address);\n\n      var ret = wasm.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n      return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @param {Datum} data_hash\n    * @returns {TransactionOutputBuilder}\n    */\n\n  }, {\n    key: \"with_datum\",\n    value: function with_datum(data_hash) {\n      _assertClass(data_hash, Datum);\n\n      var ret = wasm.transactionoutputbuilder_with_datum(this.ptr, data_hash.ptr);\n      return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputAmountBuilder}\n    */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var ret = wasm.transactionoutputbuilder_next(this.ptr);\n      return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionOutputBuilder.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionoutputbuilder_new();\n      return TransactionOutputBuilder.__wrap(ret);\n    }\n  }]);\n\n  return TransactionOutputBuilder;\n}();\n/**\n*/\n\nexport var TransactionOutputs = /*#__PURE__*/function () {\n  function TransactionOutputs() {\n    _classCallCheck(this, TransactionOutputs);\n  }\n\n  _createClass(TransactionOutputs, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutputs}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionoutputs_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionoutputs_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionOutputs}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionoutputs_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionOutput}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionoutputs_get(this.ptr, index);\n      return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionOutput);\n\n      wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionOutputs.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n      return TransactionOutputs.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionoutputs_from_json(ptr0, len0);\n      return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionoutputs_new();\n      return TransactionOutputs.__wrap(ret);\n    }\n  }]);\n\n  return TransactionOutputs;\n}();\n/**\n*/\n\nexport var TransactionUnspentOutput = /*#__PURE__*/function () {\n  function TransactionUnspentOutput() {\n    _classCallCheck(this, TransactionUnspentOutput);\n  }\n\n  _createClass(TransactionUnspentOutput, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionUnspentOutput}\n    */\n\n  }, {\n    key: \"input\",\n    value:\n    /**\n    * @returns {TransactionInput}\n    */\n    function input() {\n      var ret = wasm.transactionunspentoutput_input(this.ptr);\n      return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n\n  }, {\n    key: \"output\",\n    value: function output() {\n      var ret = wasm.transactionunspentoutput_output(this.ptr);\n      return TransactionOutput.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionUnspentOutput.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\n      return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {TransactionOutput} output\n    * @returns {TransactionUnspentOutput}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(input, output) {\n      _assertClass(input, TransactionInput);\n\n      _assertClass(output, TransactionOutput);\n\n      var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n      return TransactionUnspentOutput.__wrap(ret);\n    }\n  }]);\n\n  return TransactionUnspentOutput;\n}();\n/**\n*/\n\nexport var TransactionUnspentOutputs = /*#__PURE__*/function () {\n  function TransactionUnspentOutputs() {\n    _classCallCheck(this, TransactionUnspentOutputs);\n  }\n\n  _createClass(TransactionUnspentOutputs, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n    * @returns {TransactionUnspentOutputs}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionunspentoutputs_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionUnspentOutput}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionunspentoutputs_get(this.ptr, index);\n      return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionUnspentOutput} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionUnspentOutput);\n\n      wasm.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionUnspentOutputs.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionunspentoutputs_new();\n      return TransactionUnspentOutputs.__wrap(ret);\n    }\n  }]);\n\n  return TransactionUnspentOutputs;\n}();\n/**\n*/\n\nexport var TransactionWitnessSet = /*#__PURE__*/function () {\n  function TransactionWitnessSet() {\n    _classCallCheck(this, TransactionWitnessSet);\n  }\n\n  _createClass(TransactionWitnessSet, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSet}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionwitnessset_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionwitnessset_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionWitnessSet}\n    */\n\n  }, {\n    key: \"set_vkeys\",\n    value:\n    /**\n    * @param {Vkeywitnesses} vkeys\n    */\n    function set_vkeys(vkeys) {\n      _assertClass(vkeys, Vkeywitnesses);\n\n      wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses | undefined}\n    */\n\n  }, {\n    key: \"vkeys\",\n    value: function vkeys() {\n      var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n      return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n\n  }, {\n    key: \"set_native_scripts\",\n    value: function set_native_scripts(native_scripts) {\n      _assertClass(native_scripts, NativeScripts);\n\n      wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n\n  }, {\n    key: \"native_scripts\",\n    value: function native_scripts() {\n      var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n      return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitnesses} bootstraps\n    */\n\n  }, {\n    key: \"set_bootstraps\",\n    value: function set_bootstraps(bootstraps) {\n      _assertClass(bootstraps, BootstrapWitnesses);\n\n      wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses | undefined}\n    */\n\n  }, {\n    key: \"bootstraps\",\n    value: function bootstraps() {\n      var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n      return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n\n  }, {\n    key: \"set_plutus_scripts\",\n    value: function set_plutus_scripts(plutus_scripts) {\n      _assertClass(plutus_scripts, PlutusScripts);\n\n      wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n\n  }, {\n    key: \"plutus_scripts\",\n    value: function plutus_scripts() {\n      var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n      return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} plutus_data\n    */\n\n  }, {\n    key: \"set_plutus_data\",\n    value: function set_plutus_data(plutus_data) {\n      _assertClass(plutus_data, PlutusList);\n\n      wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n\n  }, {\n    key: \"plutus_data\",\n    value: function plutus_data() {\n      var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n      return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Redeemers} redeemers\n    */\n\n  }, {\n    key: \"set_redeemers\",\n    value: function set_redeemers(redeemers) {\n      _assertClass(redeemers, Redeemers);\n\n      wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n    * @returns {Redeemers | undefined}\n    */\n\n  }, {\n    key: \"redeemers\",\n    value: function redeemers() {\n      var ret = wasm.transactionwitnessset_redeemers(this.ptr);\n      return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionWitnessSet.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n      return TransactionWitnessSet.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionwitnessset_from_json(ptr0, len0);\n      return TransactionWitnessSet.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionwitnessset_new();\n      return TransactionWitnessSet.__wrap(ret);\n    }\n  }]);\n\n  return TransactionWitnessSet;\n}();\n/**\n* Builder de-duplicates witnesses as they are added\n*/\n\nexport var TransactionWitnessSetBuilder = /*#__PURE__*/function () {\n  function TransactionWitnessSetBuilder() {\n    _classCallCheck(this, TransactionWitnessSetBuilder);\n  }\n\n  _createClass(TransactionWitnessSetBuilder, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionwitnesssetbuilder_free(ptr);\n    }\n    /**\n    * @param {Vkeywitness} vkey\n    */\n\n  }, {\n    key: \"add_vkey\",\n    value: function add_vkey(vkey) {\n      _assertClass(vkey, Vkeywitness);\n\n      wasm.transactionwitnesssetbuilder_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n    * @param {BootstrapWitness} bootstrap\n    */\n\n  }, {\n    key: \"add_bootstrap\",\n    value: function add_bootstrap(bootstrap) {\n      _assertClass(bootstrap, BootstrapWitness);\n\n      wasm.transactionwitnesssetbuilder_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n    * @param {NativeScript} native_script\n    */\n\n  }, {\n    key: \"add_native_script\",\n    value: function add_native_script(native_script) {\n      _assertClass(native_script, NativeScript);\n\n      wasm.transactionwitnesssetbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n    * @param {PlutusScript} plutus_script\n    */\n\n  }, {\n    key: \"add_plutus_script\",\n    value: function add_plutus_script(plutus_script) {\n      _assertClass(plutus_script, PlutusScript);\n\n      wasm.transactionwitnesssetbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n    * @param {PlutusData} plutus_datum\n    */\n\n  }, {\n    key: \"add_plutus_datum\",\n    value: function add_plutus_datum(plutus_datum) {\n      _assertClass(plutus_datum, PlutusData);\n\n      wasm.transactionwitnesssetbuilder_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n    * @param {Redeemer} redeemer\n    */\n\n  }, {\n    key: \"add_redeemer\",\n    value: function add_redeemer(redeemer) {\n      _assertClass(redeemer, Redeemer);\n\n      wasm.transactionwitnesssetbuilder_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n    * @param {RequiredWitnessSet} required_wits\n    */\n\n  }, {\n    key: \"add_required_wits\",\n    value: function add_required_wits(required_wits) {\n      _assertClass(required_wits, RequiredWitnessSet);\n\n      wasm.transactionwitnesssetbuilder_add_required_wits(this.ptr, required_wits.ptr);\n    }\n    /**\n    * @returns {TransactionWitnessSetBuilder}\n    */\n\n  }, {\n    key: \"add_existing\",\n    value:\n    /**\n    * @param {TransactionWitnessSet} wit_set\n    */\n    function add_existing(wit_set) {\n      _assertClass(wit_set, TransactionWitnessSet);\n\n      wasm.transactionwitnesssetbuilder_add_existing(this.ptr, wit_set.ptr);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var ret = wasm.transactionwitnesssetbuilder_build(this.ptr);\n      return TransactionWitnessSet.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionWitnessSetBuilder.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionwitnesssetbuilder_new();\n      return TransactionWitnessSetBuilder.__wrap(ret);\n    }\n  }]);\n\n  return TransactionWitnessSetBuilder;\n}();\n/**\n*/\n\nexport var TransactionWitnessSets = /*#__PURE__*/function () {\n  function TransactionWitnessSets() {\n    _classCallCheck(this, TransactionWitnessSets);\n  }\n\n  _createClass(TransactionWitnessSets, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSets}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.transactionwitnesssets_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.transactionwitnesssets_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionWitnessSets}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.transactionwitnesssets_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionWitnessSet}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n      return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {TransactionWitnessSet} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, TransactionWitnessSet);\n\n      wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(TransactionWitnessSets.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n      return TransactionWitnessSets.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.transactionwitnesssets_from_json(ptr0, len0);\n      return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.transactionwitnesssets_new();\n      return TransactionWitnessSets.__wrap(ret);\n    }\n  }]);\n\n  return TransactionWitnessSets;\n}();\n/**\n*/\n\nexport var URL = /*#__PURE__*/function () {\n  function URL() {\n    _classCallCheck(this, URL);\n  }\n\n  _createClass(URL, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_url_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.url_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {URL}\n    */\n\n  }, {\n    key: \"url\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function url() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.url_url(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(URL.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.url_from_bytes(ptr0, len0);\n      return URL.__wrap(ret);\n    }\n    /**\n    * @param {string} url\n    * @returns {URL}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(url) {\n      var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.url_new(ptr0, len0);\n      return URL.__wrap(ret);\n    }\n  }]);\n\n  return URL;\n}();\n/**\n*/\n\nexport var UnitInterval = /*#__PURE__*/function () {\n  function UnitInterval() {\n    _classCallCheck(this, UnitInterval);\n  }\n\n  _createClass(UnitInterval, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.unitinterval_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {UnitInterval}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.unitinterval_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.unitinterval_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {UnitInterval}\n    */\n\n  }, {\n    key: \"numerator\",\n    value:\n    /**\n    * @returns {BigNum}\n    */\n    function numerator() {\n      var ret = wasm.unitinterval_numerator(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"denominator\",\n    value: function denominator() {\n      var ret = wasm.unitinterval_denominator(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} numerator\n    * @param {BigNum} denominator\n    * @returns {UnitInterval}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(UnitInterval.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n      return UnitInterval.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.unitinterval_from_json(ptr0, len0);\n      return UnitInterval.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(numerator, denominator) {\n      _assertClass(numerator, BigNum);\n\n      _assertClass(denominator, BigNum);\n\n      var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n      return UnitInterval.__wrap(ret);\n    }\n  }]);\n\n  return UnitInterval;\n}();\n/**\n*/\n\nexport var Update = /*#__PURE__*/function () {\n  function Update() {\n    _classCallCheck(this, Update);\n  }\n\n  _createClass(Update, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_update_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.update_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Update}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.update_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.update_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Update}\n    */\n\n  }, {\n    key: \"proposed_protocol_parameter_updates\",\n    value:\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    function proposed_protocol_parameter_updates() {\n      var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n      return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"epoch\",\n    value: function epoch() {\n      var ret = wasm.update_epoch(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n    * @param {number} epoch\n    * @returns {Update}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Update.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.update_from_bytes(ptr0, len0);\n      return Update.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.update_from_json(ptr0, len0);\n      return Update.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(proposed_protocol_parameter_updates, epoch) {\n      _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n\n      var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n      return Update.__wrap(ret);\n    }\n  }]);\n\n  return Update;\n}();\n/**\n*/\n\nexport var VRFCert = /*#__PURE__*/function () {\n  function VRFCert() {\n    _classCallCheck(this, VRFCert);\n  }\n\n  _createClass(VRFCert, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfcert_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFCert}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfcert_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.vrfcert_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {VRFCert}\n    */\n\n  }, {\n    key: \"output\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function output() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfcert_output(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"proof\",\n    value: function proof() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfcert_proof(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} output\n    * @param {Uint8Array} proof\n    * @returns {VRFCert}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(VRFCert.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n      return VRFCert.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfcert_from_json(ptr0, len0);\n      return VRFCert.__wrap(ret);\n    }\n  }, {\n    key: \"new\",\n    value: function _new(output, proof) {\n      var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n      var len1 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n      return VRFCert.__wrap(ret);\n    }\n  }]);\n\n  return VRFCert;\n}();\n/**\n*/\n\nexport var VRFKeyHash = /*#__PURE__*/function () {\n  function VRFKeyHash() {\n    _classCallCheck(this, VRFKeyHash);\n  }\n\n  _createClass(VRFKeyHash, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFKeyHash}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfkeyhash_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFKeyHash}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfkeyhash_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {VRFKeyHash}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(VRFKeyHash.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n      return VRFKeyHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n      return VRFKeyHash.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfkeyhash_from_hex(ptr0, len0);\n      return VRFKeyHash.__wrap(ret);\n    }\n  }]);\n\n  return VRFKeyHash;\n}();\n/**\n*/\n\nexport var VRFVKey = /*#__PURE__*/function () {\n  function VRFVKey() {\n    _classCallCheck(this, VRFVKey);\n  }\n\n  _createClass(VRFVKey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFVKey}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value:\n    /**\n    * @returns {Uint8Array}\n    */\n    function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfvkey_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n\n  }, {\n    key: \"to_bech32\",\n    value: function to_bech32(prefix) {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFVKey}\n    */\n\n  }, {\n    key: \"to_hex\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_hex() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vrfvkey_to_hex(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @param {string} hex\n    * @returns {VRFVKey}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(VRFVKey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n      return VRFVKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_bech32\",\n    value: function from_bech32(bech_str) {\n      var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfvkey_from_bech32(ptr0, len0);\n      return VRFVKey.__wrap(ret);\n    }\n  }, {\n    key: \"from_hex\",\n    value: function from_hex(hex) {\n      var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vrfvkey_from_hex(ptr0, len0);\n      return VRFVKey.__wrap(ret);\n    }\n  }]);\n\n  return VRFVKey;\n}();\n/**\n*/\n\nexport var Value = /*#__PURE__*/function () {\n  function Value() {\n    _classCallCheck(this, Value);\n  }\n\n  _createClass(Value, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_value_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.value_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.value_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.value_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"is_zero\",\n    value:\n    /**\n    * @returns {boolean}\n    */\n    function is_zero() {\n      var ret = wasm.value_is_zero(this.ptr);\n      return ret !== 0;\n    }\n    /**\n    * @returns {BigNum}\n    */\n\n  }, {\n    key: \"coin\",\n    value: function coin() {\n      var ret = wasm.value_coin(this.ptr);\n      return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    */\n\n  }, {\n    key: \"set_coin\",\n    value: function set_coin(coin) {\n      _assertClass(coin, BigNum);\n\n      wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n    * @returns {MultiAsset | undefined}\n    */\n\n  }, {\n    key: \"multiasset\",\n    value: function multiasset() {\n      var ret = wasm.value_multiasset(this.ptr);\n      return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    */\n\n  }, {\n    key: \"set_multiasset\",\n    value: function set_multiasset(multiasset) {\n      _assertClass(multiasset, MultiAsset);\n\n      wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n    * @param {Value} rhs\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"checked_add\",\n    value: function checked_add(rhs) {\n      _assertClass(rhs, Value);\n\n      var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"checked_sub\",\n    value: function checked_sub(rhs_value) {\n      _assertClass(rhs_value, Value);\n\n      var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"clamped_sub\",\n    value: function clamped_sub(rhs_value) {\n      _assertClass(rhs_value, Value);\n\n      var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * note: values are only partially comparable\n    * @param {Value} rhs_value\n    * @returns {number | undefined}\n    */\n\n  }, {\n    key: \"compare\",\n    value: function compare(rhs_value) {\n      _assertClass(rhs_value, Value);\n\n      var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n      return ret === 0xFFFFFF ? undefined : ret;\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Value.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.value_from_bytes(ptr0, len0);\n      return Value.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.value_from_json(ptr0, len0);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(coin) {\n      _assertClass(coin, BigNum);\n\n      var ret = wasm.value_new(coin.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"new_from_assets\",\n    value: function new_from_assets(multiasset) {\n      _assertClass(multiasset, MultiAsset);\n\n      var ret = wasm.value_new_from_assets(multiasset.ptr);\n      return Value.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n\n  }, {\n    key: \"zero\",\n    value: function zero() {\n      var ret = wasm.value_zero();\n      return Value.__wrap(ret);\n    }\n  }]);\n\n  return Value;\n}();\n/**\n*/\n\nexport var Vkey = /*#__PURE__*/function () {\n  function Vkey() {\n    _classCallCheck(this, Vkey);\n  }\n\n  _createClass(Vkey, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vkey_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkey}\n    */\n\n  }, {\n    key: \"public_key\",\n    value:\n    /**\n    * @returns {PublicKey}\n    */\n    function public_key() {\n      var ret = wasm.vkey_public_key(this.ptr);\n      return PublicKey.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Vkey.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vkey_from_bytes(ptr0, len0);\n      return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} pk\n    * @returns {Vkey}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(pk) {\n      _assertClass(pk, PublicKey);\n\n      var ret = wasm.vkey_new(pk.ptr);\n      return Vkey.__wrap(ret);\n    }\n  }]);\n\n  return Vkey;\n}();\n/**\n*/\n\nexport var Vkeys = /*#__PURE__*/function () {\n  function Vkeys() {\n    _classCallCheck(this, Vkeys);\n  }\n\n  _createClass(Vkeys, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n    * @returns {Vkeys}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.vkeys_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkey}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.vkeys_get(this.ptr, index);\n      return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Vkey);\n\n      wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Vkeys.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.vkeys_new();\n      return Vkeys.__wrap(ret);\n    }\n  }]);\n\n  return Vkeys;\n}();\n/**\n*/\n\nexport var Vkeywitness = /*#__PURE__*/function () {\n  function Vkeywitness() {\n    _classCallCheck(this, Vkeywitness);\n  }\n\n  _createClass(Vkeywitness, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vkeywitness_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitness}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.vkeywitness_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.vkeywitness_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Vkeywitness}\n    */\n\n  }, {\n    key: \"vkey\",\n    value:\n    /**\n    * @returns {Vkey}\n    */\n    function vkey() {\n      var ret = wasm.vkeywitness_vkey(this.ptr);\n      return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n\n  }, {\n    key: \"signature\",\n    value: function signature() {\n      var ret = wasm.vkeywitness_signature(this.ptr);\n      return Ed25519Signature.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Vkeywitness.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n      return Vkeywitness.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.vkeywitness_from_json(ptr0, len0);\n      return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @returns {Vkeywitness}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new(vkey, signature) {\n      _assertClass(vkey, Vkey);\n\n      _assertClass(signature, Ed25519Signature);\n\n      var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n      return Vkeywitness.__wrap(ret);\n    }\n  }]);\n\n  return Vkeywitness;\n}();\n/**\n*/\n\nexport var Vkeywitnesses = /*#__PURE__*/function () {\n  function Vkeywitnesses() {\n    _classCallCheck(this, Vkeywitnesses);\n  }\n\n  _createClass(Vkeywitnesses, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.vkeywitnesses_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkeywitness}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      var ret = wasm.vkeywitnesses_get(this.ptr, index);\n      return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitness} elem\n    */\n\n  }, {\n    key: \"add\",\n    value: function add(elem) {\n      _assertClass(elem, Vkeywitness);\n\n      wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Vkeywitnesses.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.vkeywitnesses_new();\n      return Vkeywitnesses.__wrap(ret);\n    }\n  }]);\n\n  return Vkeywitnesses;\n}();\n/**\n*/\n\nexport var Withdrawals = /*#__PURE__*/function () {\n  function Withdrawals() {\n    _classCallCheck(this, Withdrawals);\n  }\n\n  _createClass(Withdrawals, [{\n    key: \"__destroy_into_raw\",\n    value: function __destroy_into_raw() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      return ptr;\n    }\n  }, {\n    key: \"free\",\n    value: function free() {\n      var ptr = this.__destroy_into_raw();\n\n      wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"to_bytes\",\n    value: function to_bytes() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.withdrawals_to_bytes(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n        wasm.__wbindgen_free(r0, r1 * 1);\n\n        return v0;\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n      }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Withdrawals}\n    */\n\n  }, {\n    key: \"to_json\",\n    value:\n    /**\n    * @returns {string}\n    */\n    function to_json() {\n      try {\n        var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n        wasm.withdrawals_to_json(retptr, this.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n      } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n\n        wasm.__wbindgen_free(r0, r1);\n      }\n    }\n    /**\n    * @returns {any}\n    */\n\n  }, {\n    key: \"to_js_value\",\n    value: function to_js_value() {\n      var ret = wasm.withdrawals_to_js_value(this.ptr);\n      return takeObject(ret);\n    }\n    /**\n    * @param {string} json\n    * @returns {Withdrawals}\n    */\n\n  }, {\n    key: \"len\",\n    value:\n    /**\n    * @returns {number}\n    */\n    function len() {\n      var ret = wasm.withdrawals_len(this.ptr);\n      return ret >>> 0;\n    }\n    /**\n    * @param {RewardAddress} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      _assertClass(key, RewardAddress);\n\n      _assertClass(value, BigNum);\n\n      var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} key\n    * @returns {BigNum | undefined}\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      _assertClass(key, RewardAddress);\n\n      var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n      return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      var ret = wasm.withdrawals_keys(this.ptr);\n      return RewardAddresses.__wrap(ret);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Withdrawals.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"from_bytes\",\n    value: function from_bytes(bytes) {\n      var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n      return Withdrawals.__wrap(ret);\n    }\n  }, {\n    key: \"from_json\",\n    value: function from_json(json) {\n      var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n      var len0 = WASM_VECTOR_LEN;\n      var ret = wasm.withdrawals_from_json(ptr0, len0);\n      return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {Withdrawals}\n    */\n\n  }, {\n    key: \"new\",\n    value: function _new() {\n      var ret = wasm.withdrawals_new();\n      return Withdrawals.__wrap(ret);\n    }\n  }]);\n\n  return Withdrawals;\n}();\nexport function __wbindgen_object_drop_ref(arg0) {\n  takeObject(arg0);\n}\n;\nexport function __wbg_transaction_new(arg0) {\n  var ret = Transaction.__wrap(arg0);\n\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_string_new(arg0, arg1) {\n  var ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_json_parse(arg0, arg1) {\n  var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_json_serialize(arg0, arg1) {\n  var obj = getObject(arg1);\n  var ret = JSON.stringify(obj === undefined ? null : obj);\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbg_fetch_da4b562f370dc6f1(arg0, arg1) {\n  var ret = getObject(arg0).fetch(getObject(arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_string_get(arg0, arg1) {\n  var obj = getObject(arg1);\n  var ret = typeof obj === 'string' ? obj : undefined;\n  var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbg_getRandomValues_fb6b088efb6bead2() {\n  return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n  }, arguments);\n}\n;\nexport function __wbg_randomFillSync_654a7797990fb8db() {\n  return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n  }, arguments);\n}\n;\nexport function __wbg_static_accessor_NODE_MODULE_33b45247c55045b0() {\n  var ret = module;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_process_70251ed1291754d5(arg0) {\n  var ret = getObject(arg0).process;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_object(arg0) {\n  var val = getObject(arg0);\n  var ret = typeof val === 'object' && val !== null;\n  return ret;\n}\n;\nexport function __wbg_versions_b23f2588cdb2ddbb(arg0) {\n  var ret = getObject(arg0).versions;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_node_61b8c9a82499895d(arg0) {\n  var ret = getObject(arg0).node;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_is_string(arg0) {\n  var ret = typeof getObject(arg0) === 'string';\n  return ret;\n}\n;\nexport function __wbg_require_2a93bc09fee45aca() {\n  return handleError(function (arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_crypto_2f56257a38275dbd(arg0) {\n  var ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_msCrypto_d07655bf62361f21(arg0) {\n  var ret = getObject(arg0).msCrypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_object_clone_ref(arg0) {\n  var ret = getObject(arg0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_5d0410fa55f5533e() {\n  return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n  }, arguments);\n}\n;\nexport function __wbg_headers_0fdd616fbc057820(arg0) {\n  var ret = getObject(arg0).headers;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_newwithstrandinit_155cb1478824b198() {\n  return handleError(function (arg0, arg1, arg2) {\n    var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_instanceof_Response_d61ff4c524b8dbc4(arg0) {\n  var ret = getObject(arg0) instanceof Response;\n  return ret;\n}\n;\nexport function __wbg_json_0662bf961a0f5285() {\n  return handleError(function (arg0) {\n    var ret = getObject(arg0).json();\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbindgen_cb_drop(arg0) {\n  var obj = takeObject(arg0).original;\n\n  if (obj.cnt-- == 1) {\n    obj.a = 0;\n    return true;\n  }\n\n  var ret = false;\n  return ret;\n}\n;\nexport function __wbg_call_ba36642bd901572b() {\n  return handleError(function (arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_newnoargs_9fdd8f3961dd1bee(arg0, arg1) {\n  var ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_call_3fc07b7d5fc9022d() {\n  return handleError(function (arg0, arg1, arg2) {\n    var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_new_edbe38a4e21329dd() {\n  var ret = new Object();\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_new_c143a4f563f78c4e(arg0, arg1) {\n  try {\n    var state0 = {\n      a: arg0,\n      b: arg1\n    };\n\n    var cb0 = function cb0(arg0, arg1) {\n      var a = state0.a;\n      state0.a = 0;\n\n      try {\n        return __wbg_adapter_1335(a, state0.b, arg0, arg1);\n      } finally {\n        state0.a = a;\n      }\n    };\n\n    var ret = new Promise(cb0);\n    return addHeapObject(ret);\n  } finally {\n    state0.a = state0.b = 0;\n  }\n}\n;\nexport function __wbg_resolve_cae3d8f752f5db88(arg0) {\n  var ret = Promise.resolve(getObject(arg0));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_then_c2361a9d5c9a4fcb(arg0, arg1) {\n  var ret = getObject(arg0).then(getObject(arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_then_6c9a4bf55755f9b8(arg0, arg1, arg2) {\n  var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_self_bb69a836a72ec6e9() {\n  return handleError(function () {\n    var ret = self.self;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_window_3304fc4b414c9693() {\n  return handleError(function () {\n    var ret = window.window;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_globalThis_e0d21cabc6630763() {\n  return handleError(function () {\n    var ret = globalThis.globalThis;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbg_global_8463719227271676() {\n  return handleError(function () {\n    var ret = global.global;\n    return addHeapObject(ret);\n  }, arguments);\n}\n;\nexport function __wbindgen_is_undefined(arg0) {\n  var ret = getObject(arg0) === undefined;\n  return ret;\n}\n;\nexport function __wbg_buffer_9e184d6f785de5ed(arg0) {\n  var ret = getObject(arg0).buffer;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_new_e8101319e4cf95fc(arg0) {\n  var ret = new Uint8Array(getObject(arg0));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_e8ae7b27314e8b98(arg0, arg1, arg2) {\n  getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n}\n;\nexport function __wbg_length_2d56cb37075fcfb1(arg0) {\n  var ret = getObject(arg0).length;\n  return ret;\n}\n;\nexport function __wbg_newwithlength_a8d1dbcbe703a5c6(arg0) {\n  var ret = new Uint8Array(arg0 >>> 0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_subarray_901ede8318da52a6(arg0, arg1, arg2) {\n  var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_set_73349fc4814e0fc6() {\n  return handleError(function (arg0, arg1, arg2) {\n    var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n    return ret;\n  }, arguments);\n}\n;\nexport function __wbg_new_3a746f2619705add(arg0, arg1) {\n  var ret = new Function(getStringFromWasm0(arg0, arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_call_f54d3a6dadb199ca(arg0, arg1) {\n  var ret = getObject(arg0).call(getObject(arg1));\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n  var ret = getObject(arg0) === getObject(arg1);\n  return ret;\n}\n;\nexport function __wbg_self_ac379e780a0d8b94(arg0) {\n  var ret = getObject(arg0).self;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_crypto_1e4302b85d4f64a2(arg0) {\n  var ret = getObject(arg0).crypto;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_getRandomValues_1b4ba144162a5c9e(arg0) {\n  var ret = getObject(arg0).getRandomValues;\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_require_6461b1e9a0d7c34a(arg0, arg1) {\n  var ret = require(getStringFromWasm0(arg0, arg1));\n\n  return addHeapObject(ret);\n}\n;\nexport function __wbg_randomFillSync_1b52c8482374c55b(arg0, arg1, arg2) {\n  getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n}\n;\nexport function __wbg_getRandomValues_1ef11e888e5228e9(arg0, arg1, arg2) {\n  getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n}\n;\nexport function __wbindgen_debug_string(arg0, arg1) {\n  var ret = debugString(getObject(arg1));\n  var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  getInt32Memory0()[arg0 / 4 + 1] = len0;\n  getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n}\n;\nexport function __wbindgen_throw(arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n}\n;\nexport function __wbindgen_rethrow(arg0) {\n  throw takeObject(arg0);\n}\n;\nexport function __wbindgen_memory() {\n  var ret = wasm.memory;\n  return addHeapObject(ret);\n}\n;\nexport function __wbindgen_closure_wrapper8300(arg0, arg1, arg2) {\n  var ret = makeMutClosure(arg0, arg1, 464, __wbg_adapter_32);\n  return addHeapObject(ret);\n}\n;"],"names":["heap","Array","fill","undefined","getObject","idx","push","heap_next","length","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","_ptr","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","isLikeNone","x","debugString","val","type","concat","description","name","isArray","debug","i","className","builtInMatches","exec","toString","call","JSON","stringify","_","Error","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","_len","arguments","args","_key","apply","original","__wbg_adapter_32","arg2","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","len0","TransactionMetadatum","__wrap","decode_arbitrary_bytes_from_metadatum","metadata","retptr","r0","r1","v0","encode_json_str_to_metadatum","json","schema","decode_metadatum_to_json_str","metadatum","cachegetUint32Memory0","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","min_fee","tx","linear_fee","ex_unit_prices","Transaction","LinearFee","ExUnitPrices","BigNum","encode_json_str_to_plutus_datum","PlutusData","decode_plutus_datum_to_json_str","datum","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_auxiliary_data","auxiliary_data","AuxiliaryData","AuxiliaryDataHash","hash_transaction","tx_body","TransactionBody","hash_plutus_data","plutus_data","DataHash","hash_script_data","redeemers","cost_models","datums","Redeemers","Costmdls","PlutusList","ScriptDataHash","get_implicit_input","txbody","pool_deposit","key_deposit","Value","get_deposit","min_ada_required","assets","has_data_hash","coins_per_utxo_word","encode_json_str_to_native_script","self_xpub","NativeScript","handleError","this","e","__wbg_adapter_1335","arg3","CertificateKind","Object","freeze","StakeRegistration","StakeDeregistration","StakeDelegation","PoolRegistration","PoolRetirement","GenesisKeyDelegation","MoveInstantaneousRewardsCert","MIRPot","Reserves","Treasury","MIRKind","ToOtherPot","ToStakeCredentials","RelayKind","SingleHostAddr","SingleHostName","MultiHostName","NativeScriptKind","ScriptPubkey","ScriptAll","ScriptAny","ScriptNOfK","TimelockStart","TimelockExpiry","NetworkIdKind","Testnet","Mainnet","TransactionMetadatumKind","MetadataMap","MetadataList","Int","Bytes","Text","MetadataJsonSchema","NoConversions","BasicConversions","DetailedSchema","CoinSelectionStrategyCIP2","LargestFirst","RandomImprove","LargestFirstMultiAsset","RandomImproveMultiAsset","StakeCredKind","Key","Script","ScriptWitnessKind","NativeWitness","PlutusWitness","LanguageKind","PlutusV1","PlutusV2","PlutusDataKind","ConstrPlutusData","Map","List","Integer","RedeemerTagKind","Spend","Mint","Cert","Reward","PlutusDatumSchema","ScriptKind","PlutusScriptV1","PlutusScriptV2","DatumKind","Hash","Data","ScriptHashNamespace","ScriptSchema","Wallet","Node","Address","value","__destroy_into_raw","prefix","RewardAddress","PointerAddress","EnterpriseAddress","BaseAddress","create","prototype","bech_str","AssetName","AssetNames","index","elem","Assets","GeneralTransactionMetadata","NativeScripts","native_scripts","PlutusScripts","plutus_scripts","hex","AuxiliaryDataSet","tx_index","TransactionIndexes","StakeCredential","network","payment","stake","BigInt","text","other","rhs_value","string","Bip32PublicKey","bech32_str","entropy","PublicKey","Block","Header","TransactionBodies","TransactionWitnessSets","header","transaction_bodies","transaction_witness_sets","auxiliary_data_set","invalid_transactions","BlockHash","Blockfrost","url","project_id","Vkey","Ed25519Signature","vkey","signature","chain_code","attributes","BootstrapWitnesses","s","protocol_magic","Certificate","stake_registration","stake_deregistration","stake_delegation","pool_registration","pool_retirement","genesis_key_delegation","move_instantaneous_rewards_cert","Certificates","alternative","CostModel","operation","cost","Language","Languages","DNSRecordAorAAAA","dns_name","DNSRecordSRV","Datum","data_hash","Ed25519KeyHash","Ed25519KeyHashes","input","UnitInterval","mem_price","step_price","ExUnits","steps","TransactionMetadatumLabels","GenesisDelegateHash","GenesisHash","GenesisHashes","VRFKeyHash","genesishash","genesis_delegate_hash","vrf_keyhash","HeaderBody","KESSignature","header_body","body_signature","VRFVKey","VRFCert","OperationalCert","ProtocolVersion","block_number","slot","prev_hash","issuer_vkey","vrf_vkey","nonce_vrf","leader_vrf","block_body_size","block_body_hash","operational_cert","protocol_version","Ipv4","Ipv6","KESVKey","coefficient","constant","MIRToStakeCredentials","cred","delta","StakeCredentials","ScriptHash","MintAssets","ScriptHashes","MultiAsset","MoveInstantaneousReward","pot","amount","amounts","move_instantaneous_reward","policy_id","asset_name","rhs_ma","namespace","script_pubkey","script_all","script_any","script_n_of_k","timelock_start","timelock_expiry","NetworkId","NetworkInfo","network_id","Nonce","hash","hot_vkey","sequence_number","kes_period","sigma","PlutusMap","constr_plutus_data","map","list","integer","PlutusScript","redeemer","script","Pointer","cert_index","PoolMetadata","URL","PoolMetadataHash","pool_metadata_hash","PoolParams","Relays","operator","pledge","margin","reward_account","pool_owners","relays","pool_metadata","pool_params","pool_keyhash","epoch","ProposedProtocolParameterUpdates","ProtocolParamUpdate","minfee_a","minfee_b","max_block_body_size","max_tx_size","max_block_header_size","max_epoch","n_opt","pool_pledge_influence","expansion_rate","treasury_growth_rate","d","extra_entropy","min_pool_cost","ada_per_utxo_byte","execution_costs","max_tx_ex_units","max_block_ex_units","max_value_size","collateral_percentage","max_collateral_inputs","major","minor","PublicKeys","Redeemer","RedeemerTag","tag","ex_units","RedeemerWitnessKey","Relay","single_host_addr","single_host_name","multi_host_name","RequiredWitnessSet","bootstrap","native_script","plutus_script","plutus_datum","requirements","RewardAddresses","n","addr_keyhash","ScriptRef","ScriptWitness","plutus_witness","port","ipv4","ipv6","stake_credential","Strings","TransactionWitnessSet","valid","body","witness_set","TransactionInputs","TransactionOutputs","certs","withdrawals","Withdrawals","update","Update","auxiliary_data_hash","validity_start_interval","mint","script_data_hash","collateral","required_signers","collateral_return","TransactionOutput","total_collateral","reference_inputs","inputs","outputs","fee","ttl","TransactionBuilder","TransactionUnspentOutputs","TransactionInput","script_witness","address","reference_input","output","certificate","reward_address","coin","mint_assets","required_signer","Uint32Array","cfg","TransactionBuilderConfig","TransactionBuilderConfigBuilder","_fee_algo","_coins_per_utxo_word","_pool_deposit","_key_deposit","_max_value_size","_max_tx_size","_ex_unit_prices","_costmdls","_blockfrost","_prefer_pure_change","_prefer_split_change","collateral_amount","min_split_amount_ada","native_asset_chunk_size","transaction_id","int","script_ref","TransactionOutputAmountBuilder","multiasset","TransactionOutputBuilder","TransactionUnspentOutput","vkeys","Vkeywitnesses","bootstraps","TransactionWitnessSetBuilder","required_wits","wit_set","numerator","denominator","proposed_protocol_parameter_updates","proof","rhs","pk","Vkeys","__wbindgen_object_drop_ref","__wbg_transaction_new","__wbindgen_string_new","__wbindgen_json_parse","parse","__wbindgen_json_serialize","__wbg_fetch_da4b562f370dc6f1","fetch","__wbindgen_string_get","__wbg_getRandomValues_fb6b088efb6bead2","getRandomValues","__wbg_randomFillSync_654a7797990fb8db","randomFillSync","__wbg_static_accessor_NODE_MODULE_33b45247c55045b0","__wbg_process_70251ed1291754d5","process","__wbindgen_is_object","__wbg_versions_b23f2588cdb2ddbb","versions","__wbg_node_61b8c9a82499895d","node","__wbindgen_is_string","__wbg_require_2a93bc09fee45aca","__wbg_crypto_2f56257a38275dbd","crypto","__wbg_msCrypto_d07655bf62361f21","msCrypto","__wbindgen_object_clone_ref","__wbg_set_5d0410fa55f5533e","arg4","__wbg_headers_0fdd616fbc057820","headers","__wbg_newwithstrandinit_155cb1478824b198","Request","__wbg_instanceof_Response_d61ff4c524b8dbc4","Response","__wbg_json_0662bf961a0f5285","__wbindgen_cb_drop","__wbg_call_ba36642bd901572b","__wbg_newnoargs_9fdd8f3961dd1bee","Function","__wbg_call_3fc07b7d5fc9022d","__wbg_new_edbe38a4e21329dd","__wbg_new_c143a4f563f78c4e","state0","Promise","__wbg_resolve_cae3d8f752f5db88","resolve","__wbg_then_c2361a9d5c9a4fcb","then","__wbg_then_6c9a4bf55755f9b8","__wbg_self_bb69a836a72ec6e9","self","__wbg_window_3304fc4b414c9693","window","__wbg_globalThis_e0d21cabc6630763","globalThis","__wbg_global_8463719227271676","g","global","__wbindgen_is_undefined","__wbg_buffer_9e184d6f785de5ed","__wbg_new_e8101319e4cf95fc","__wbg_set_e8ae7b27314e8b98","__wbg_length_2d56cb37075fcfb1","__wbg_newwithlength_a8d1dbcbe703a5c6","__wbg_subarray_901ede8318da52a6","__wbg_set_73349fc4814e0fc6","Reflect","__wbg_new_3a746f2619705add","__wbg_call_f54d3a6dadb199ca","__wbindgen_jsval_eq","__wbg_self_ac379e780a0d8b94","__wbg_crypto_1e4302b85d4f64a2","__wbg_getRandomValues_1b4ba144162a5c9e","__wbg_require_6461b1e9a0d7c34a","__wbg_randomFillSync_1b52c8482374c55b","__wbg_getRandomValues_1ef11e888e5228e9","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_memory","__wbindgen_closure_wrapper8300"],"sourceRoot":""}